#!/usr/bin/env python3
"""
Script de Maintenance - Syst√®me de Navigation Interactive Gemini
Valide, maintient et optimise le syst√®me complet
"""

import os
import sys
import json
import time
import shutil
import logging
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Optional

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('maintenance.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('InteractiveNavigationMaintenance')

class InteractiveNavigationMaintainer:
    """Syst√®me de maintenance pour la navigation interactive"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.maintenance_log = []
        self.issues_found = []
        self.fixes_applied = []
        self.start_time = datetime.now()
        
        # Fichiers critiques du syst√®me
        self.critical_files = [
            'interactive_web_navigator.py',
            'gemini_interactive_adapter.py',
            'install_interactive_navigation.py',
            'demo_interactive_navigation.py',
            'test_interactive_navigation.py',
            'GUIDE_NAVIGATION_INTERACTIVE.md'
        ]
        
        # D√©pendances requises
        self.required_packages = [
            'google-generativeai',
            'selenium',
            'webdriver-manager',
            'beautifulsoup4',
            'pillow',
            'requests',
            'python-dotenv',
            'flask',
            'flask-cors'
        ]
        
        logger.info("üîß Syst√®me de maintenance initialis√©")
        
    def log_action(self, action: str, status: str, details: str = ""):
        """Enregistre une action de maintenance"""
        entry = {
            'timestamp': datetime.now().isoformat(),
            'action': action,
            'status': status,
            'details': details
        }
        
        self.maintenance_log.append(entry)
        
        if status == "SUCCESS":
            logger.info(f"‚úÖ {action}: {details}")
        elif status == "WARNING":
            logger.warning(f"‚ö†Ô∏è {action}: {details}")
        else:
            logger.error(f"‚ùå {action}: {details}")
            
    def check_file_integrity(self) -> bool:
        """V√©rifie l'int√©grit√© des fichiers critiques"""
        self.log_action("INTEGRITY_CHECK", "INFO", "V√©rification de l'int√©grit√© des fichiers")
        
        all_files_ok = True
        
        for file_path in self.critical_files:
            full_path = self.project_root / file_path
            
            if not full_path.exists():
                self.log_action("FILE_MISSING", "ERROR", f"Fichier manquant: {file_path}")
                self.issues_found.append(f"Fichier manquant: {file_path}")
                all_files_ok = False
                continue
                
            # V√©rification de la taille (fichier non vide)
            if full_path.stat().st_size == 0:
                self.log_action("FILE_EMPTY", "ERROR", f"Fichier vide: {file_path}")
                self.issues_found.append(f"Fichier vide: {file_path}")
                all_files_ok = False
                continue
                
            # V√©rification de la syntaxe Python
            if file_path.endswith('.py'):
                try:
                    with open(full_path, 'r', encoding='utf-8') as f:
                        compile(f.read(), file_path, 'exec')
                    self.log_action("SYNTAX_CHECK", "SUCCESS", f"Syntaxe valide: {file_path}")
                except SyntaxError as e:
                    self.log_action("SYNTAX_ERROR", "ERROR", f"Erreur syntaxe {file_path}: {e}")
                    self.issues_found.append(f"Erreur syntaxe {file_path}: {e}")
                    all_files_ok = False
                    
        return all_files_ok
        
    def check_dependencies(self) -> bool:
        """V√©rifie les d√©pendances Python"""
        self.log_action("DEPENDENCY_CHECK", "INFO", "V√©rification des d√©pendances")
        
        missing_packages = []
        
        for package in self.required_packages:
            try:
                __import__(package.replace('-', '_'))
                self.log_action("PACKAGE_OK", "SUCCESS", f"Package disponible: {package}")
            except ImportError:
                self.log_action("PACKAGE_MISSING", "WARNING", f"Package manquant: {package}")
                missing_packages.append(package)
                
        if missing_packages:
            self.issues_found.append(f"Packages manquants: {', '.join(missing_packages)}")
            return False
            
        return True
        
    def check_configuration(self) -> bool:
        """V√©rifie les fichiers de configuration"""
        self.log_action("CONFIG_CHECK", "INFO", "V√©rification de la configuration")
        
        config_files = [
            '.env',
            'config/navigation_config.json',
            'ai_api_config.json'
        ]
        
        config_ok = True
        
        for config_file in config_files:
            config_path = self.project_root / config_file
            
            if not config_path.exists():
                self.log_action("CONFIG_MISSING", "WARNING", f"Configuration manquante: {config_file}")
                continue
                
            # V√©rification sp√©cifique selon le type
            if config_file.endswith('.json'):
                try:
                    with open(config_path, 'r', encoding='utf-8') as f:
                        json.load(f)
                    self.log_action("CONFIG_VALID", "SUCCESS", f"Configuration valide: {config_file}")
                except json.JSONDecodeError as e:
                    self.log_action("CONFIG_INVALID", "ERROR", f"JSON invalide {config_file}: {e}")
                    self.issues_found.append(f"JSON invalide {config_file}: {e}")
                    config_ok = False
                    
            elif config_file == '.env':
                # V√©rification de la cl√© API
                with open(config_path, 'r', encoding='utf-8') as f:
                    env_content = f.read()
                    
                if 'GEMINI_API_KEY' not in env_content:
                    self.log_action("API_KEY_MISSING", "WARNING", "Cl√© API Gemini non configur√©e")
                elif 'votre_cle_api_ici' in env_content:
                    self.log_action("API_KEY_PLACEHOLDER", "WARNING", "Cl√© API Gemini non modifi√©e")
                else:
                    self.log_action("API_KEY_OK", "SUCCESS", "Cl√© API Gemini configur√©e")
                    
        return config_ok
        
    def check_disk_space(self) -> bool:
        """V√©rifie l'espace disque disponible"""
        self.log_action("DISK_CHECK", "INFO", "V√©rification de l'espace disque")
        
        try:
            disk_usage = shutil.disk_usage(self.project_root)
            free_space_mb = disk_usage.free / (1024 * 1024)
            
            if free_space_mb < 100:  # Moins de 100 MB
                self.log_action("DISK_LOW", "ERROR", f"Espace disque faible: {free_space_mb:.1f} MB")
                self.issues_found.append(f"Espace disque insuffisant: {free_space_mb:.1f} MB")
                return False
            elif free_space_mb < 500:  # Moins de 500 MB
                self.log_action("DISK_WARNING", "WARNING", f"Espace disque limit√©: {free_space_mb:.1f} MB")
            else:
                self.log_action("DISK_OK", "SUCCESS", f"Espace disque suffisant: {free_space_mb:.1f} MB")
                
            return True
            
        except Exception as e:
            self.log_action("DISK_ERROR", "ERROR", f"Erreur v√©rification disque: {e}")
            return False
            
    def clean_temporary_files(self) -> bool:
        """Nettoie les fichiers temporaires"""
        self.log_action("CLEANUP", "INFO", "Nettoyage des fichiers temporaires")
        
        temp_patterns = [
            '**/*.pyc',
            '**/__pycache__',
            '**/test_results_*/*.png',
            '**/logs/*.log.old',
            '**/cache/*',
            '**/.pytest_cache'
        ]
        
        cleaned_count = 0
        
        for pattern in temp_patterns:
            for file_path in self.project_root.glob(pattern):
                try:
                    if file_path.is_file():
                        file_path.unlink()
                        cleaned_count += 1
                    elif file_path.is_dir():
                        shutil.rmtree(file_path)
                        cleaned_count += 1
                except Exception as e:
                    self.log_action("CLEANUP_ERROR", "WARNING", f"Erreur nettoyage {file_path}: {e}")
                    
        self.log_action("CLEANUP_COMPLETE", "SUCCESS", f"Nettoyage termin√©: {cleaned_count} √©l√©ments supprim√©s")
        self.fixes_applied.append(f"Nettoyage: {cleaned_count} fichiers temporaires supprim√©s")
        
        return True
        
    def optimize_imports(self) -> bool:
        """Optimise les imports Python"""
        self.log_action("IMPORT_OPTIMIZATION", "INFO", "Optimisation des imports")
        
        python_files = list(self.project_root.glob('*.py'))
        optimized_count = 0
        
        for py_file in python_files:
            if py_file.name.startswith('test_') or py_file.name.startswith('demo_'):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # V√©rification des imports inutilis√©s (basique)
                lines = content.split('\n')
                import_lines = [line for line in lines if line.strip().startswith('import ') or line.strip().startswith('from ')]
                
                if len(import_lines) > 20:  # Beaucoup d'imports
                    self.log_action("MANY_IMPORTS", "WARNING", f"Beaucoup d'imports dans {py_file.name}: {len(import_lines)}")
                    
                optimized_count += 1
                
            except Exception as e:
                self.log_action("IMPORT_ERROR", "WARNING", f"Erreur analyse imports {py_file.name}: {e}")
                
        self.log_action("IMPORT_OPTIMIZATION_COMPLETE", "SUCCESS", f"Analyse de {optimized_count} fichiers Python")
        return True
        
    def update_documentation(self) -> bool:
        """Met √† jour la documentation"""
        self.log_action("DOC_UPDATE", "INFO", "Mise √† jour de la documentation")
        
        try:
            # G√©n√©ration d'un rapport de maintenance
            maintenance_report = {
                "last_maintenance": datetime.now().isoformat(),
                "critical_files_status": "OK" if all(
                    (self.project_root / f).exists() for f in self.critical_files
                ) else "ISSUES",
                "dependencies_status": "OK" if not self.issues_found else "ISSUES",
                "issues_found": self.issues_found,
                "fixes_applied": self.fixes_applied,
                "maintenance_log": self.maintenance_log
            }
            
            # Sauvegarde du rapport
            report_file = self.project_root / f"maintenance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(maintenance_report, f, indent=2, ensure_ascii=False)
                
            self.log_action("DOC_SAVED", "SUCCESS", f"Rapport sauvegard√©: {report_file.name}")
            return True
            
        except Exception as e:
            self.log_action("DOC_ERROR", "ERROR", f"Erreur sauvegarde documentation: {e}")
            return False
            
    def run_quick_tests(self) -> bool:
        """Ex√©cute des tests rapides"""
        self.log_action("QUICK_TESTS", "INFO", "Ex√©cution de tests rapides")
        
        try:
            # Test d'import des modules principaux
            test_imports = [
                'interactive_web_navigator',
                'gemini_interactive_adapter',
                'ai_api_interface'
            ]
            
            for module in test_imports:
                try:
                    __import__(module)
                    self.log_action("IMPORT_TEST", "SUCCESS", f"Import r√©ussi: {module}")
                except ImportError as e:
                    self.log_action("IMPORT_TEST", "ERROR", f"Import √©chou√© {module}: {e}")
                    self.issues_found.append(f"Import √©chou√©: {module}")
                    
            return True
            
        except Exception as e:
            self.log_action("QUICK_TESTS_ERROR", "ERROR", f"Erreur tests rapides: {e}")
            return False
            
    def generate_health_report(self) -> Dict:
        """G√©n√®re un rapport de sant√© du syst√®me"""
        end_time = datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        health_score = 100
        if self.issues_found:
            health_score -= len(self.issues_found) * 10
        health_score = max(0, health_score)
        
        report = {
            "maintenance_summary": {
                "start_time": self.start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "duration_seconds": round(duration, 2),
                "health_score": health_score,
                "issues_found": len(self.issues_found),
                "fixes_applied": len(self.fixes_applied),
                "status": "HEALTHY" if health_score >= 80 else "NEEDS_ATTENTION" if health_score >= 50 else "CRITICAL"
            },
            "critical_files": {
                "total": len(self.critical_files),
                "present": len([f for f in self.critical_files if (self.project_root / f).exists()]),
                "missing": [f for f in self.critical_files if not (self.project_root / f).exists()]
            },
            "issues_detail": self.issues_found,
            "fixes_detail": self.fixes_applied,
            "maintenance_actions": self.maintenance_log,
            "recommendations": self.generate_recommendations()
        }
        
        return report
        
    def generate_recommendations(self) -> List[str]:
        """G√©n√®re des recommandations d'am√©lioration"""
        recommendations = []
        
        if len(self.issues_found) > 5:
            recommendations.append("R√©soudre les probl√®mes critiques avant utilisation")
            
        if any("PACKAGE_MISSING" in issue for issue in self.issues_found):
            recommendations.append("Installer les d√©pendances manquantes avec pip install -r requirements.txt")
            
        if any("API_KEY" in issue for issue in self.issues_found):
            recommendations.append("Configurer la cl√© API Gemini dans le fichier .env")
            
        if not recommendations:
            recommendations.append("Syst√®me en bon √©tat, maintenance r√©guli√®re recommand√©e")
            
        return recommendations
        
    def run_full_maintenance(self) -> Dict:
        """Ex√©cute la maintenance compl√®te"""
        self.log_action("MAINTENANCE_START", "INFO", "D√©but de la maintenance compl√®te")
        
        maintenance_tasks = [
            ("V√©rification int√©grit√©", self.check_file_integrity),
            ("V√©rification d√©pendances", self.check_dependencies),
            ("V√©rification configuration", self.check_configuration),
            ("V√©rification espace disque", self.check_disk_space),
            ("Nettoyage fichiers temporaires", self.clean_temporary_files),
            ("Optimisation imports", self.optimize_imports),
            ("Tests rapides", self.run_quick_tests),
            ("Mise √† jour documentation", self.update_documentation)
        ]
        
        for task_name, task_func in maintenance_tasks:
            try:
                self.log_action("TASK_START", "INFO", f"D√©but: {task_name}")
                success = task_func()
                
                if success:
                    self.log_action("TASK_SUCCESS", "SUCCESS", f"Termin√©: {task_name}")
                else:
                    self.log_action("TASK_PARTIAL", "WARNING", f"Partiellement r√©ussi: {task_name}")
                    
            except Exception as e:
                self.log_action("TASK_ERROR", "ERROR", f"Erreur {task_name}: {e}")
                
        # G√©n√©ration du rapport final
        health_report = self.generate_health_report()
        
        self.log_action("MAINTENANCE_COMPLETE", "SUCCESS", 
                       f"Maintenance termin√©e - Score de sant√©: {health_report['maintenance_summary']['health_score']}")
        
        return health_report

def display_health_report(report: Dict):
    """Affiche le rapport de sant√©"""
    print("\n" + "=" * 80)
    print("üè• RAPPORT DE SANT√â DU SYST√àME - NAVIGATION INTERACTIVE GEMINI")
    print("=" * 80)
    
    summary = report["maintenance_summary"]
    
    print(f"\n‚è±Ô∏è DUR√âE DE MAINTENANCE: {summary['duration_seconds']}s")
    print(f"üéØ SCORE DE SANT√â: {summary['health_score']}/100")
    print(f"üìä STATUT: {summary['status']}")
    
    # Ic√¥nes de statut
    status_icons = {
        "HEALTHY": "üü¢",
        "NEEDS_ATTENTION": "üü°", 
        "CRITICAL": "üî¥"
    }
    
    print(f"{status_icons.get(summary['status'], '‚ö™')} {summary['status']}")
    
    # D√©tails des fichiers
    files_info = report["critical_files"]
    print(f"\nüìÅ FICHIERS CRITIQUES:")
    print(f"   ‚Ä¢ Total: {files_info['total']}")
    print(f"   ‚Ä¢ Pr√©sents: {files_info['present']} ‚úÖ")
    print(f"   ‚Ä¢ Manquants: {len(files_info['missing'])} ‚ùå")
    
    if files_info['missing']:
        print("   üìã Fichiers manquants:")
        for missing_file in files_info['missing']:
            print(f"      - {missing_file}")
    
    # Probl√®mes trouv√©s
    if report["issues_detail"]:
        print(f"\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS ({len(report['issues_detail'])}):")
        for i, issue in enumerate(report["issues_detail"], 1):
            print(f"   {i}. {issue}")
    
    # Corrections appliqu√©es
    if report["fixes_detail"]:
        print(f"\nüîß CORRECTIONS APPLIQU√âES ({len(report['fixes_detail'])}):")
        for i, fix in enumerate(report["fixes_detail"], 1):
            print(f"   {i}. {fix}")
    
    # Recommandations
    if report["recommendations"]:
        print(f"\nüí° RECOMMANDATIONS:")
        for i, rec in enumerate(report["recommendations"], 1):
            print(f"   {i}. {rec}")
    
    # √âvaluation finale
    if summary['health_score'] >= 90:
        print(f"\nüéâ EXCELLENT - Syst√®me en parfait √©tat")
    elif summary['health_score'] >= 70:
        print(f"\nüëç BON - Syst√®me fonctionnel avec am√©liorations mineures possibles")
    elif summary['health_score'] >= 50:
        print(f"\n‚ö†Ô∏è ATTENTION - Syst√®me n√©cessite des corrections")
    else:
        print(f"\nüö® CRITIQUE - Interventions urgentes requises")
    
    print("\n" + "=" * 80)

def main():
    """Point d'entr√©e principal"""
    print("üîß MAINTENANCE SYST√àME - NAVIGATION INTERACTIVE GEMINI")
    print("üéØ Validation, nettoyage et optimisation automatiques")
    
    maintainer = InteractiveNavigationMaintainer()
    
    try:
        # Ex√©cution compl√®te de la maintenance
        health_report = maintainer.run_full_maintenance()
        
        # Affichage du rapport
        display_health_report(health_report)
        
        # Sauvegarde du rapport
        report_file = f"health_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(health_report, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Rapport complet sauvegard√©: {report_file}")
        
        # Code de retour bas√© sur la sant√©
        health_score = health_report["maintenance_summary"]["health_score"]
        return health_score >= 50
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Maintenance interrompue par l'utilisateur")
        return False
    except Exception as e:
        logger.error(f"üí• Erreur critique lors de la maintenance: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
