#!/usr/bin/env python3
"""
Script de test complet du syst√®me Searx intelligent v2
V√©rifie tous les composants et d√©pendances avec gestion d'erreurs avanc√©e
"""

import sys
import logging
import traceback
import time
from pathlib import Path

# Configuration du logging pour les tests
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger('SearxSystemTest')

class SearxSystemTester:
    """Testeur complet du syst√®me Searx"""
    
    def __init__(self):
        self.results = {}
        self.start_time = time.time()
    
    def test_imports(self):
        """Test des imports des modules principaux"""
        print("üîç TEST DES IMPORTS")
        print("=" * 30)
        
        tests = [
            ("requests", "Requ√™tes HTTP"),
            ("psutil", "Gestion des processus"),
            ("bs4", "BeautifulSoup pour parsing HTML"),
            ("selenium", "Automation web"),
            ("PIL", "Pillow pour images"),
            ("json", "JSON standard"),
            ("socket", "Sockets r√©seau"),
            ("subprocess", "Processus syst√®me"),
            ("platform", "Information plateforme"),
            ("docker", "Client Docker Python")
        ]
        
        success_count = 0
        for module, description in tests:
            try:
                __import__(module)
                print(f"‚úÖ {module:12} - {description}")
                success_count += 1
            except ImportError as e:
                print(f"‚ùå {module:12} - {description} - ERREUR: {e}")
        
        print(f"\nüìä R√©sultat: {success_count}/{len(tests)} modules disponibles")
        self.results['imports'] = success_count == len(tests)
        return self.results['imports']

    def test_port_manager(self):
        """Test du gestionnaire de ports"""
        print("\nüîß TEST DU GESTIONNAIRE DE PORTS")
        print("=" * 40)
        
        try:
            from port_manager import PortManager
            pm = PortManager()
            
            # Test de d√©tection de port
            port_8080_available = pm.is_port_available(8080)
            print(f"üìç Port 8080 disponible: {'‚úÖ Oui' if port_8080_available else '‚ùå Non'}")
            
            if not port_8080_available:
                process = pm.get_process_using_port(8080)
                if process:
                    print(f"üîç Processus sur 8080: {process['name']} (PID: {process['pid']})")
                    print(f"   Commande: {process['cmdline'][:50]}...")
            
            # Test de recherche de port alternatif
            alt_port = pm.find_available_port(8081, 5)
            if alt_port:
                print(f"üîÑ Port alternatif trouv√©: {alt_port}")
            else:
                print("‚ö†Ô∏è  Aucun port alternatif trouv√©")
            
            # Test de g√©n√©ration de configuration
            config_success, port, compose_file = pm.setup_searx_with_available_port()
            if config_success:
                print(f"‚úÖ Configuration g√©n√©r√©e: {compose_file} (port {port})")
            else:
                print("‚ö†Ô∏è  Impossible de g√©n√©rer une configuration")
            
            print("‚úÖ Gestionnaire de ports fonctionnel")
            self.results['port_manager'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur gestionnaire de ports: {e}")
            self.results['port_manager'] = False
            return False

    def test_searx_interface(self):
        """Test de l'interface Searx"""
        print("\nüîç TEST DE L'INTERFACE SEARX")
        print("=" * 35)
        
        try:
            from searx_interface import SearxInterface
            
            # Cr√©er une instance sans d√©marrer Searx
            searx = SearxInterface()
            print("‚úÖ Interface Searx cr√©√©e")
            
            # V√©rifier l'initialisation du gestionnaire de ports
            if searx.port_manager:
                print("‚úÖ Gestionnaire de ports int√©gr√©")
            else:
                print("‚ö†Ô∏è  Gestionnaire de ports non initialis√©")
            
            # V√©rifier l'initialisation de la capture visuelle
            if searx.visual_capture:
                print("‚úÖ Capture visuelle int√©gr√©e")
            else:
                print("‚ö†Ô∏è  Capture visuelle non initialis√©e (normal si ChromeDriver absent)")
            
            print("‚úÖ Interface Searx fonctionnelle")
            self.results['searx_interface'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur interface Searx: {e}")
            self.results['searx_interface'] = False
            return False

    def test_docker(self):
        """Test de la disponibilit√© de Docker"""
        print("\nüê≥ TEST DE DOCKER")
        print("=" * 20)
        
        try:
            import subprocess
            
            # V√©rifier si Docker est install√©
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"‚úÖ Docker disponible: {version}")
                
                # V√©rifier si Docker fonctionne
                result = subprocess.run(['docker', 'ps'], 
                                      capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    print("‚úÖ Docker daemon actif")
                    
                    # V√©rifier Docker Compose
                    result = subprocess.run(['docker-compose', '--version'], 
                                          capture_output=True, text=True, timeout=5)
                    if result.returncode == 0:
                        print(f"‚úÖ Docker Compose disponible: {result.stdout.strip()}")
                    else:
                        print("‚ö†Ô∏è  Docker Compose non disponible")
                    
                    self.results['docker'] = True
                    return True
                else:
                    print("‚ö†Ô∏è  Docker install√© mais daemon non actif")
                    print("üí° D√©marrez Docker Desktop")
                    self.results['docker'] = False
                    return False
            else:
                print("‚ùå Docker non install√©")
                print("üí° Installez Docker Desktop")
                self.results['docker'] = False
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå Docker ne r√©pond pas (timeout)")
            self.results['docker'] = False
            return False
        except FileNotFoundError:
            print("‚ùå Docker non trouv√© dans le PATH")
            self.results['docker'] = False
            return False
        except Exception as e:
            print(f"‚ùå Erreur Docker: {e}")
            self.results['docker'] = False
            return False

    def test_files(self):
        """Test de la pr√©sence des fichiers n√©cessaires"""
        print("\nüìã TEST DES FICHIERS SYST√àME")
        print("=" * 32)
        
        required_files = [
            ("port_manager.py", "Gestionnaire de ports"),
            ("searx_interface.py", "Interface Searx"),
            ("searx_smart_start.py", "Script de d√©marrage"),
            ("searx_manager.bat", "Script Windows"),
            ("requirements.txt", "D√©pendances Python")
        ]
        
        optional_files = [
            ("docker-compose.searx.yml", "Config Docker principale"),
            ("docker-compose.searx-alt.yml", "Config Docker alternative"),
            ("free_port_8080.bat", "Script lib√©ration port"),
            ("searx_visual_capture.py", "Capture visuelle")
        ]
        
        required_count = 0
        optional_count = 0
        
        print("üìÅ Fichiers requis:")
        for filename, description in required_files:
            if Path(filename).exists():
                print(f"‚úÖ {filename:25} - {description}")
                required_count += 1
            else:
                print(f"‚ùå {filename:25} - {description} - MANQUANT")
        
        print("\nüìÅ Fichiers optionnels:")
        for filename, description in optional_files:
            if Path(filename).exists():
                print(f"‚úÖ {filename:25} - {description}")
                optional_count += 1
            else:
                print(f"‚ö†Ô∏è  {filename:25} - {description} - Non trouv√©")
        
        total_required = len(required_files)
        total_optional = len(optional_files)
        
        print(f"\nüìä Fichiers requis: {required_count}/{total_required}")
        print(f"üìä Fichiers optionnels: {optional_count}/{total_optional}")
        
        self.results['files'] = required_count == total_required
        return self.results['files']

    def test_smart_start(self):
        """Test du script de d√©marrage intelligent"""
        print("\nüöÄ TEST DU D√âMARRAGE INTELLIGENT")
        print("=" * 38)
        
        try:
            # Import du module de d√©marrage
            import searx_smart_start
            print("‚úÖ Module de d√©marrage intelligent import√©")
            
            # Tester les fonctions principales
            if hasattr(searx_smart_start, 'main'):
                print("‚úÖ Fonction main() disponible")
            
            if hasattr(searx_smart_start, 'show_status'):
                print("‚úÖ Fonction show_status() disponible")
            
            if hasattr(searx_smart_start, 'stop_all'):
                print("‚úÖ Fonction stop_all() disponible")
            
            print("‚úÖ Script de d√©marrage intelligent fonctionnel")
            self.results['smart_start'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur script d√©marrage: {e}")
            self.results['smart_start'] = False
            return False

    def run_full_test(self):
        """Ex√©cute tous les tests et g√©n√®re un rapport"""
        print("üéØ D√âBUT DES TESTS SYST√àME SEARX")
        print("=" * 60)
        print(f"üìÖ Date: {time.ctime()}")
        print(f"üñ•Ô∏è  Plateforme: {sys.platform}")
        print(f"üêç Python: {sys.version}")
        print("=" * 60)
        
        tests = [
            ("Imports Python", self.test_imports),
            ("Gestionnaire de ports", self.test_port_manager),
            ("Interface Searx", self.test_searx_interface),
            ("Docker", self.test_docker),
            ("Fichiers syst√®me", self.test_files),
            ("D√©marrage intelligent", self.test_smart_start)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                if result:
                    passed_tests += 1
            except Exception as e:
                print(f"‚ùå ERREUR CRITIQUE dans {test_name}: {e}")
                self.results[test_name.lower().replace(' ', '_')] = False
        
        # G√©n√©rer le rapport final
        self._generate_final_report(passed_tests, total_tests)
        
        return passed_tests >= total_tests * 0.8

    def _generate_final_report(self, passed_tests, total_tests):
        """G√©n√®re le rapport final"""
        elapsed_time = time.time() - self.start_time
        
        print("\n" + "=" * 60)
        print("üìã RAPPORT FINAL - SYST√àME SEARX INTELLIGENT")
        print("=" * 60)
        
        print(f"‚è±Ô∏è  Dur√©e des tests: {elapsed_time:.2f} secondes")
        print(f"üèÜ Score: {passed_tests}/{total_tests} tests r√©ussis")
        
        # D√©tail des r√©sultats
        print("\nüìä D√âTAIL DES R√âSULTATS:")
        for test_name, result in self.results.items():
            status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
            print(f"  {status} - {test_name.replace('_', ' ').title()}")
        
        # Statut global
        success_rate = passed_tests / total_tests
        if success_rate >= 0.9:
            print("\nüéâ EXCELLENT! Syst√®me compl√®tement fonctionnel")
            print("üöÄ Pr√™t pour production - Lancez: python searx_smart_start.py")
        elif success_rate >= 0.7:
            print("\n‚úÖ BON! Syst√®me largement fonctionnel")
            print("üí° Quelques am√©liorations possibles")
        elif success_rate >= 0.5:
            print("\n‚ö†Ô∏è  MOYEN! Syst√®me partiellement fonctionnel")
            print("üîß Corrections n√©cessaires")
        else:
            print("\n‚ùå CRITIQUE! Syst√®me non fonctionnel")
            print("üÜò Intervention urgente requise")
        
        # Recommandations sp√©cifiques
        self._generate_recommendations()

    def _generate_recommendations(self):
        """G√©n√®re des recommandations bas√©es sur les r√©sultats"""
        print("\nüí° RECOMMANDATIONS SP√âCIFIQUES:")
        
        if not self.results.get('imports', True):
            print("üì¶ D√âPENDANCES:")
            print("   - Ex√©cutez: pip install -r requirements.txt")
            print("   - V√©rifiez votre environnement Python")
        
        if not self.results.get('docker', True):
            print("üê≥ DOCKER:")
            print("   - Installez Docker Desktop: https://docker.com/products/docker-desktop")
            print("   - D√©marrez le service Docker")
            print("   - V√©rifiez que Docker fonctionne: docker ps")
        
        if not self.results.get('files', True):
            print("üìÅ FICHIERS:")
            print("   - V√©rifiez l'int√©grit√© du projet")
            print("   - Re-t√©l√©chargez les fichiers manquants")
        
        if not self.results.get('port_manager', True):
            print("üîß GESTIONNAIRE DE PORTS:")
            print("   - Installez psutil: pip install psutil")
            print("   - V√©rifiez les permissions syst√®me")
        
        print("\nüîó RESSOURCES:")
        print("   - Documentation Searx: https://searx.github.io/searx/")
        print("   - Guide Docker: https://docs.docker.com/get-started/")
        print("   - Support Python: https://python.org/downloads/")

def main():
    """Fonction principale"""
    try:
        tester = SearxSystemTester()
        success = tester.run_full_test()
        
        if success:
            print("\nüéØ PROCHAINES √âTAPES:")
            print("1. Lancez: python searx_smart_start.py")
            print("2. Ou utilisez: searx_manager.bat (Windows)")
            print("3. Testez l'interface web une fois d√©marr√©")
        else:
            print("\nüîß ACTIONS REQUISES:")
            print("1. Corrigez les erreurs signal√©es")
            print("2. Relancez ce test: python test_searx_complete.py")
            print("3. Contactez le support si probl√®mes persistants")
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ùå Test interrompu par l'utilisateur")
        return 2
    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE: {e}")
        traceback.print_exc()
        return 3

if __name__ == "__main__":
    sys.exit(main())
