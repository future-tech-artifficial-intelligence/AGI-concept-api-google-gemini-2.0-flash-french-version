"""
Int√©gration du Syst√®me de Navigation Interactive avec l'Adaptateur Gemini
Ce module connecte le nouveau syst√®me d'interaction web avec l'API Gemini
"""

import logging
import json
import time
from typing import Dict, List, Any, Optional
from datetime import datetime

from interactive_web_navigator import (
    get_interactive_navigator,
    initialize_interactive_navigator,
    create_interactive_navigation_session,
    interact_with_web_element,
    get_page_interactive_elements,
    close_interactive_session
)

# Configuration du logging
logger = logging.getLogger('GeminiInteractiveIntegration')

class GeminiInteractiveWebAdapter:
    """Adaptateur pour int√©grer la navigation interactive avec l'API Gemini"""
    
    def __init__(self, gemini_api_instance=None):
        self.gemini_api = gemini_api_instance
        self.interactive_enabled = True
        self.max_content_length = 8000
        
        # Initialiser le navigateur interactif
        self.navigator = initialize_interactive_navigator()
        
        # Compteurs et statistiques
        self.interaction_stats = {
            'total_requests': 0,
            'interactive_sessions_created': 0,
            'successful_interactions': 0,
            'elements_clicked': 0,
            'tabs_explored': 0,
            'forms_interacted': 0
        }
        
        logger.info("üéØ Adaptateur Gemini-Navigation Interactive initialis√©")
    
    def detect_interactive_request(self, prompt: str) -> Dict[str, Any]:
        """
        D√©tecte si le prompt n√©cessite une interaction avec des √©l√©ments web
        
        Args:
            prompt: Le prompt de l'utilisateur
            
        Returns:
            Dict contenant le type d'interaction et les param√®tres
        """
        prompt_lower = prompt.lower()
        
        # Mots-cl√©s pour interactions directes
        interaction_keywords = [
            'clique sur', 'cliquer sur', 'appuie sur', 'appuyer sur',
            's√©lectionne', 's√©lectionner', 'choisir', 'choisit',
            'ouvre l\'onglet', 'ouvrir l\'onglet', 'va dans l\'onglet',
            'remplis le formulaire', 'remplir le formulaire',
            'interagir avec', 'interagis avec'
        ]
        
        # Mots-cl√©s pour navigation par onglets
        tab_keywords = [
            'onglet', 'onglets', 'tab', 'tabs',
            'section', 'sections', 'cat√©gorie', 'cat√©gories',
            'menu', 'navigation'
        ]
        
        # Mots-cl√©s pour exploration compl√®te
        exploration_keywords = [
            'explore toutes les options', 'parcours tous les onglets',
            'visite toutes les sections', 'analyse tous les menus',
            'teste toutes les fonctionnalit√©s'
        ]
        
        # Mots-cl√©s pour formulaires
        form_keywords = [
            'formulaire', 'form', 'remplis', 'saisir', 'entrer',
            'recherche', 'search', 'login', 'connexion'
        ]
        
        detection_result = {
            'requires_interaction': False,
            'interaction_type': None,
            'confidence': 0.0,
            'extracted_params': {},
            'suggested_actions': []
        }
        
        # D√©tecter les interactions directes
        if any(keyword in prompt_lower for keyword in interaction_keywords):
            detection_result.update({
                'requires_interaction': True,
                'interaction_type': 'direct_interaction',
                'confidence': 0.9
            })
            
            # Extraire l'√©l√©ment cible si mentionn√©
            target_element = self._extract_target_element(prompt)
            if target_element:
                detection_result['extracted_params']['target_element'] = target_element
        
        # D√©tecter la navigation par onglets
        elif any(keyword in prompt_lower for keyword in tab_keywords):
            detection_result.update({
                'requires_interaction': True,
                'interaction_type': 'tab_navigation',
                'confidence': 0.8
            })
            detection_result['suggested_actions'] = ['explore_tabs', 'click_tabs']
        
        # D√©tecter l'exploration compl√®te
        elif any(keyword in prompt_lower for keyword in exploration_keywords):
            detection_result.update({
                'requires_interaction': True,
                'interaction_type': 'full_exploration',
                'confidence': 0.85
            })
            detection_result['suggested_actions'] = ['explore_all_elements', 'systematic_navigation']
        
        # D√©tecter les interactions avec formulaires
        elif any(keyword in prompt_lower for keyword in form_keywords):
            detection_result.update({
                'requires_interaction': True,
                'interaction_type': 'form_interaction',
                'confidence': 0.7
            })
            detection_result['suggested_actions'] = ['fill_forms', 'submit_forms']
        
        # Extraire l'URL si pr√©sente
        url_match = self._extract_url_from_prompt(prompt)
        if url_match:
            detection_result['extracted_params']['url'] = url_match
        
        self.interaction_stats['total_requests'] += 1
        
        logger.info(f"üîç D√©tection interaction: {detection_result['interaction_type']} "
                   f"(confiance: {detection_result['confidence']})")
        
        return detection_result
    
    def handle_interactive_request(self, prompt: str, user_id: int, 
                                 session_id: str = None) -> Dict[str, Any]:
        """
        Traite une demande d'interaction web
        
        Args:
            prompt: Le prompt de l'utilisateur
            user_id: ID de l'utilisateur
            session_id: ID de session (optionnel)
            
        Returns:
            Dict contenant la r√©ponse et les donn√©es d'interaction
        """
        try:
            # D√©tecter le type d'interaction n√©cessaire
            detection = self.detect_interactive_request(prompt)
            
            if not detection['requires_interaction']:
                return {
                    'success': False,
                    'error': 'Aucune interaction d√©tect√©e',
                    'fallback_required': True
                }
            
            # G√©n√©rer un ID de session unique si non fourni
            if not session_id:
                session_id = f"interactive_{user_id}_{int(time.time())}"
            
            interaction_type = detection['interaction_type']
            
            # Traiter selon le type d'interaction
            if interaction_type == 'direct_interaction':
                result = self._handle_direct_interaction(prompt, session_id, detection)
            elif interaction_type == 'tab_navigation':
                result = self._handle_tab_navigation(prompt, session_id, detection)
            elif interaction_type == 'full_exploration':
                result = self._handle_full_exploration(prompt, session_id, detection)
            elif interaction_type == 'form_interaction':
                result = self._handle_form_interaction(prompt, session_id, detection)
            else:
                result = self._handle_generic_interaction(prompt, session_id, detection)
            
            # Enrichir la r√©ponse avec des informations contextuelles
            if result['success']:
                result['interaction_summary'] = self._generate_interaction_summary(session_id)
                result['response'] = self._format_interaction_response(result, prompt)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement interaction: {e}")
            return {
                'success': False,
                'error': str(e),
                'fallback_required': True
            }
    
    def _handle_direct_interaction(self, prompt: str, session_id: str, 
                                 detection: Dict[str, Any]) -> Dict[str, Any]:
        """Traite une interaction directe (clic sur un √©l√©ment sp√©cifique)"""
        try:
            # Extraire l'URL si fournie
            url = detection['extracted_params'].get('url')
            if not url:
                return {'success': False, 'error': 'URL requise pour l\'interaction directe'}
            
            # Cr√©er la session interactive
            navigation_result = create_interactive_navigation_session(
                session_id, url, goals=['direct_interaction']
            )
            
            if not navigation_result['success']:
                return navigation_result
            
            self.interaction_stats['interactive_sessions_created'] += 1
            
            # Obtenir les √©l√©ments interactifs
            elements_result = get_page_interactive_elements(session_id)
            
            if not elements_result['success']:
                return elements_result
            
            # Identifier l'√©l√©ment cible
            target_text = detection['extracted_params'].get('target_element', '')
            target_element = self._find_best_matching_element(
                elements_result['top_interactive_elements'], target_text
            )
            
            if not target_element:
                return {
                    'success': False,
                    'error': '√âl√©ment cible non trouv√©',
                    'available_elements': elements_result['top_interactive_elements'][:5]
                }
            
            # Effectuer l'interaction
            interaction_result = interact_with_web_element(
                session_id, target_element['id'], 'click'
            )
            
            if interaction_result['success']:
                self.interaction_stats['successful_interactions'] += 1
                self.interaction_stats['elements_clicked'] += 1
            
            return {
                'success': interaction_result['success'],
                'interaction_performed': True,
                'element_interacted': target_element,
                'page_changed': interaction_result['page_changed'],
                'new_url': interaction_result.get('new_url'),
                'details': interaction_result
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur interaction directe: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_tab_navigation(self, prompt: str, session_id: str, 
                             detection: Dict[str, Any]) -> Dict[str, Any]:
        """Traite la navigation par onglets"""
        try:
            url = detection['extracted_params'].get('url')
            if not url:
                return {'success': False, 'error': 'URL requise pour la navigation par onglets'}
            
            # Cr√©er la session
            navigation_result = create_interactive_navigation_session(
                session_id, url, goals=['tab_navigation', 'explore_tabs']
            )
            
            if not navigation_result['success']:
                return navigation_result
            
            self.interaction_stats['interactive_sessions_created'] += 1
            
            # Obtenir les √©l√©ments
            elements_result = get_page_interactive_elements(session_id)
            tabs_info = []
            tab_contents = []
            
            # Trouver tous les onglets
            for element in elements_result.get('top_interactive_elements', []):
                if element['type'] == 'tabs':
                    # Cliquer sur l'onglet
                    interaction_result = interact_with_web_element(
                        session_id, element['id'], 'click'
                    )
                    
                    if interaction_result['success']:
                        self.interaction_stats['tabs_explored'] += 1
                        
                        # Attendre le chargement du contenu
                        time.sleep(2)
                        
                        # Capturer le contenu de l'onglet
                        current_elements = get_page_interactive_elements(session_id)
                        tab_content = {
                            'tab_name': element['text'],
                            'tab_id': element['id'],
                            'content_summary': self._summarize_tab_content(current_elements),
                            'interactive_elements': len(current_elements.get('top_interactive_elements', []))
                        }
                        tab_contents.append(tab_content)
                        tabs_info.append(element)
            
            return {
                'success': True,
                'interaction_performed': True,
                'tabs_explored': len(tabs_info),
                'tabs_content': tab_contents,
                'navigation_summary': f"Explor√© {len(tabs_info)} onglets avec succ√®s"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur navigation onglets: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_full_exploration(self, prompt: str, session_id: str, 
                               detection: Dict[str, Any]) -> Dict[str, Any]:
        """Traite l'exploration compl√®te d'un site"""
        try:
            url = detection['extracted_params'].get('url')
            if not url:
                return {'success': False, 'error': 'URL requise pour l\'exploration compl√®te'}
            
            navigation_result = create_interactive_navigation_session(
                session_id, url, goals=['full_exploration', 'systematic_analysis']
            )
            
            if not navigation_result['success']:
                return navigation_result
            
            exploration_results = {
                'tabs_explored': 0,
                'buttons_clicked': 0,
                'forms_found': 0,
                'navigation_links_followed': 0,
                'content_discovered': [],
                'interaction_log': []
            }
            
            # Phase 1: Explorer tous les onglets
            elements_result = get_page_interactive_elements(session_id)
            
            for element in elements_result.get('top_interactive_elements', [])[:15]:  # Top 15 pour √©viter trop d'interactions
                if element['score'] > 0.5:  # Seulement les √©l√©ments pertinents
                    interaction_result = interact_with_web_element(
                        session_id, element['id'], 'click'
                    )
                    
                    exploration_results['interaction_log'].append({
                        'element_text': element['text'],
                        'element_type': element['type'],
                        'success': interaction_result['success'],
                        'page_changed': interaction_result.get('page_changed', False)
                    })
                    
                    if interaction_result['success']:
                        if element['type'] == 'tabs':
                            exploration_results['tabs_explored'] += 1
                        elif element['type'] == 'buttons':
                            exploration_results['buttons_clicked'] += 1
                        elif element['type'] == 'navigation':
                            exploration_results['navigation_links_followed'] += 1
                    
                    # Petit d√©lai entre les interactions
                    time.sleep(1.5)
            
            # R√©sum√© final
            total_interactions = sum([
                exploration_results['tabs_explored'],
                exploration_results['buttons_clicked'],
                exploration_results['navigation_links_followed']
            ])
            
            return {
                'success': True,
                'interaction_performed': True,
                'exploration_complete': True,
                'total_interactions': total_interactions,
                'results': exploration_results,
                'summary': f"Exploration compl√®te: {total_interactions} interactions r√©alis√©es"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur exploration compl√®te: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_form_interaction(self, prompt: str, session_id: str, 
                               detection: Dict[str, Any]) -> Dict[str, Any]:
        """Traite les interactions avec les formulaires"""
        try:
            url = detection['extracted_params'].get('url')
            if not url:
                return {'success': False, 'error': 'URL requise pour l\'interaction avec formulaire'}
            
            navigation_result = create_interactive_navigation_session(
                session_id, url, goals=['form_interaction']
            )
            
            if not navigation_result['success']:
                return navigation_result
            
            elements_result = get_page_interactive_elements(session_id)
            form_results = []
            
            # Trouver les formulaires et champs
            for element in elements_result.get('elements_by_type', {}).get('forms', []):
                form_results.append({
                    'form_id': element['id'],
                    'form_text': element['text'],
                    'interactions_available': ['analyze_fields', 'test_submission']
                })
                
                self.interaction_stats['forms_interacted'] += 1
            
            return {
                'success': True,
                'interaction_performed': True,
                'forms_found': len(form_results),
                'forms_details': form_results,
                'note': 'Interaction avec formulaires identifi√©s (saisie de donn√©es non impl√©ment√©e pour s√©curit√©)'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur interaction formulaire: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_generic_interaction(self, prompt: str, session_id: str, 
                                  detection: Dict[str, Any]) -> Dict[str, Any]:
        """Traite les interactions g√©n√©riques"""
        try:
            url = detection['extracted_params'].get('url')
            if not url:
                return {'success': False, 'error': 'URL requise'}
            
            navigation_result = create_interactive_navigation_session(session_id, url)
            
            if not navigation_result['success']:
                return navigation_result
            
            elements_result = get_page_interactive_elements(session_id)
            
            return {
                'success': True,
                'interaction_performed': False,
                'analysis_performed': True,
                'elements_discovered': elements_result.get('total_elements', 0),
                'interactive_elements': elements_result.get('top_interactive_elements', [])[:10],
                'suggestions': elements_result.get('interaction_suggestions', [])
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur interaction g√©n√©rique: {e}")
            return {'success': False, 'error': str(e)}
    
    def _extract_target_element(self, prompt: str) -> str:
        """Extrait l'√©l√©ment cible mentionn√© dans le prompt"""
        prompt_lower = prompt.lower()
        
        # Patterns pour identifier les √©l√©ments cibles
        patterns = [
            r'clique(?:r)? sur ["\']?([^"\']+)["\']?',
            r'appuie(?:r)? sur ["\']?([^"\']+)["\']?',
            r's√©lectionne(?:r)? ["\']?([^"\']+)["\']?',
            r'l\'onglet ["\']?([^"\']+)["\']?',
            r'le bouton ["\']?([^"\']+)["\']?',
            r'le lien ["\']?([^"\']+)["\']?'
        ]
        
        import re
        for pattern in patterns:
            match = re.search(pattern, prompt_lower)
            if match:
                return match.group(1).strip()
        
        return ""
    
    def _extract_url_from_prompt(self, prompt: str) -> Optional[str]:
        """Extrait l'URL du prompt"""
        import re
        url_pattern = r'https?://[^\s]+|www\.[^\s]+'
        match = re.search(url_pattern, prompt)
        return match.group(0) if match else None
    
    def _find_best_matching_element(self, elements: List[Dict], target_text: str) -> Optional[Dict]:
        """Trouve l'√©l√©ment qui correspond le mieux au texte cible"""
        if not target_text:
            return elements[0] if elements else None
        
        target_lower = target_text.lower()
        best_match = None
        best_score = 0
        
        for element in elements:
            element_text = element.get('text', '').lower()
            
            # Score exact match
            if target_lower == element_text:
                return element
            
            # Score partial match
            if target_lower in element_text or element_text in target_lower:
                score = len(set(target_lower.split()) & set(element_text.split()))
                if score > best_score:
                    best_score = score
                    best_match = element
        
        return best_match if best_match else (elements[0] if elements else None)
    
    def _summarize_tab_content(self, elements_result: Dict[str, Any]) -> str:
        """R√©sume le contenu d'un onglet"""
        total_elements = elements_result.get('total_elements', 0)
        elements_by_type = elements_result.get('elements_by_type', {})
        
        summary_parts = [f"{total_elements} √©l√©ments interactifs"]
        
        for element_type, elements in elements_by_type.items():
            if elements:
                summary_parts.append(f"{len(elements)} {element_type}")
        
        return ", ".join(summary_parts)
    
    def _generate_interaction_summary(self, session_id: str) -> Dict[str, Any]:
        """G√©n√®re un r√©sum√© des interactions pour une session"""
        try:
            elements_result = get_page_interactive_elements(session_id)
            
            return {
                'session_id': session_id,
                'current_url': elements_result.get('current_url'),
                'total_elements': elements_result.get('total_elements', 0),
                'elements_by_type': {
                    element_type: len(elements)
                    for element_type, elements in elements_result.get('elements_by_type', {}).items()
                },
                'top_recommendations': elements_result.get('interaction_suggestions', [])
            }
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©sum√©: {e}")
            return {}
    
    def _format_interaction_response(self, result: Dict[str, Any], original_prompt: str) -> str:
        """Formate la r√©ponse pour l'utilisateur"""
        if not result['success']:
            return f"‚ùå Je n'ai pas pu effectuer l'interaction demand√©e: {result.get('error', 'Erreur inconnue')}"
        
        response_parts = []
        
        if result.get('interaction_performed'):
            if result.get('tabs_explored', 0) > 0:
                response_parts.append(f"‚úÖ J'ai explor√© {result['tabs_explored']} onglets sur le site.")
                
                if 'tabs_content' in result:
                    response_parts.append("\nüìã Contenu des onglets d√©couverts:")
                    for tab in result['tabs_content'][:5]:  # Limiter √† 5
                        response_parts.append(f"‚Ä¢ {tab['tab_name']}: {tab['content_summary']}")
            
            elif result.get('element_interacted'):
                element = result['element_interacted']
                response_parts.append(f"‚úÖ J'ai cliqu√© sur '{element['text'][:50]}'")
                
                if result.get('page_changed'):
                    response_parts.append("üìÑ La page a chang√© suite √† cette interaction.")
            
            elif result.get('exploration_complete'):
                total = result.get('total_interactions', 0)
                response_parts.append(f"‚úÖ J'ai effectu√© une exploration compl√®te avec {total} interactions.")
                
                if 'results' in result:
                    r = result['results']
                    response_parts.append(f"üìä R√©sultats: {r.get('tabs_explored', 0)} onglets, "
                                        f"{r.get('buttons_clicked', 0)} boutons, "
                                        f"{r.get('navigation_links_followed', 0)} liens de navigation")
        
        else:
            response_parts.append("üîç J'ai analys√© les √©l√©ments interactifs de la page.")
            
            if result.get('elements_discovered', 0) > 0:
                response_parts.append(f"üìã {result['elements_discovered']} √©l√©ments interactifs d√©couverts.")
        
        # Ajouter les suggestions si disponibles
        if 'interaction_summary' in result and result['interaction_summary'].get('top_recommendations'):
            response_parts.append("\nüí° Suggestions d'interaction:")
            for suggestion in result['interaction_summary']['top_recommendations'][:3]:
                response_parts.append(f"‚Ä¢ {suggestion.get('description', 'Action sugg√©r√©e')}")
        
        return "\n".join(response_parts) if response_parts else "‚úÖ Interaction r√©alis√©e avec succ√®s."
    
    def get_interaction_statistics(self) -> Dict[str, Any]:
        """Retourne les statistiques d'interaction"""
        return {
            'stats': self.interaction_stats,
            'navigator_stats': self.navigator.get_statistics() if self.navigator else {}
        }
    
    def cleanup_sessions(self, max_age_hours: int = 2):
        """Nettoie les sessions anciennes"""
        try:
            # √Ä impl√©menter : nettoyage automatique des sessions
            logger.info(f"üßπ Nettoyage des sessions de plus de {max_age_hours}h")
        except Exception as e:
            logger.error(f"‚ùå Erreur nettoyage: {e}")

# Instance globale
_gemini_interactive_adapter = None

def get_gemini_interactive_adapter(gemini_api_instance=None):
    """Retourne l'instance globale de l'adaptateur interactif"""
    global _gemini_interactive_adapter
    if _gemini_interactive_adapter is None:
        _gemini_interactive_adapter = GeminiInteractiveWebAdapter(gemini_api_instance)
    return _gemini_interactive_adapter

def initialize_gemini_interactive_adapter(gemini_api_instance=None):
    """Initialise l'adaptateur interactif Gemini"""
    adapter = get_gemini_interactive_adapter(gemini_api_instance)
    logger.info("üöÄ Adaptateur Gemini Interactive initialis√©")
    return adapter

def handle_gemini_interactive_request(prompt: str, user_id: int, session_id: str = None):
    """Point d'entr√©e principal pour les requ√™tes interactives Gemini"""
    adapter = get_gemini_interactive_adapter()
    return adapter.handle_interactive_request(prompt, user_id, session_id)

def detect_interactive_need(prompt: str):
    """D√©tecte si un prompt n√©cessite une interaction web"""
    adapter = get_gemini_interactive_adapter()
    return adapter.detect_interactive_request(prompt)
