#!/usr/bin/env python3
"""
Lanceur Rapide - Syst√®me de Navigation Interactive Gemini
Interface simple pour d√©marrer rapidement toutes les fonctionnalit√©s
"""

import os
import sys
import json
import time
import subprocess
from pathlib import Path
from datetime import datetime

class InteractiveNavigationLauncher:
    """Lanceur pour le syst√®me de navigation interactive"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_loaded = False
        self.available_actions = {}
        
    def print_header(self):
        """Affiche l'en-t√™te du lanceur"""
        print("=" * 80)
        print("üöÄ LANCEUR SYST√àME DE NAVIGATION INTERACTIVE GEMINI")
        print("üéØ Interface de d√©marrage rapide")
        print("=" * 80)
        
    def print_menu(self):
        """Affiche le menu principal"""
        print("\nüìã ACTIONS DISPONIBLES:")
        print("=" * 50)
        
        actions = {
            "1": ("üèóÔ∏è  Installation", "Installer le syst√®me complet", "install"),
            "2": ("üé≠ D√©monstration", "Lancer la d√©monstration interactive", "demo"),
            "3": ("üß™ Tests", "Ex√©cuter les tests automatis√©s", "test"),
            "4": ("üîß Maintenance", "Effectuer la maintenance syst√®me", "maintenance"),
            "5": ("üåê Navigation", "D√©marrer la navigation interactive", "navigate"),
            "6": ("üìä Rapport", "G√©n√©rer un rapport de statut", "status"),
            "7": ("üîç Diagnostic", "Diagnostiquer les probl√®mes", "diagnose"),
            "8": ("üìñ Guide", "Afficher le guide d'utilisation", "guide"),
            "9": ("‚öôÔ∏è  Configuration", "Configurer le syst√®me", "config"),
            "0": ("üö™ Quitter", "Fermer le lanceur", "exit")
        }
        
        for key, (icon, desc, action) in actions.items():
            print(f"   {key}. {icon} {desc}")
            self.available_actions[key] = action
            
        print("=" * 50)
        
    def check_prerequisites(self) -> bool:
        """V√©rifie les pr√©requis syst√®me"""
        print("\nüîç V√©rification des pr√©requis...")
        
        # V√©rification Python
        if sys.version_info < (3, 8):
            print(f"‚ùå Python 3.8+ requis (version actuelle: {sys.version_info.major}.{sys.version_info.minor})")
            return False
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
        
        # V√©rification des fichiers critiques
        critical_files = [
            'interactive_web_navigator.py',
            'gemini_interactive_adapter.py',
            'install_interactive_navigation.py'
        ]
        
        missing_files = []
        for file_name in critical_files:
            if not (self.project_root / file_name).exists():
                missing_files.append(file_name)
                
        if missing_files:
            print(f"‚ùå Fichiers manquants: {', '.join(missing_files)}")
            return False
        print("‚úÖ Fichiers critiques pr√©sents")
        
        # V√©rification de la configuration
        env_file = self.project_root / '.env'
        if not env_file.exists():
            print("‚ö†Ô∏è Fichier .env manquant - configuration requise")
            return False
            
        # V√©rification de la cl√© API
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.read()
            
        if 'GEMINI_API_KEY' not in env_content or 'votre_cle_api_ici' in env_content:
            print("‚ö†Ô∏è Cl√© API Gemini non configur√©e")
            return False
        print("‚úÖ Configuration de base pr√©sente")
        
        return True
        
    def run_installation(self):
        """Lance l'installation"""
        print("\nüèóÔ∏è INSTALLATION DU SYST√àME")
        print("-" * 40)
        
        install_script = self.project_root / 'install_interactive_navigation.py'
        if not install_script.exists():
            print("‚ùå Script d'installation non trouv√©")
            return False
            
        try:
            print("üöÄ Lancement de l'installation...")
            result = subprocess.run([sys.executable, str(install_script)], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Installation termin√©e avec succ√®s")
                return True
            else:
                print(f"‚ùå Installation √©chou√©e (code: {result.returncode})")
                return False
                
        except Exception as e:
            print(f"üí• Erreur lors de l'installation: {e}")
            return False
            
    def run_demo(self):
        """Lance la d√©monstration"""
        print("\nüé≠ D√âMONSTRATION INTERACTIVE")
        print("-" * 40)
        
        demo_script = self.project_root / 'demo_interactive_navigation.py'
        if not demo_script.exists():
            print("‚ùå Script de d√©monstration non trouv√©")
            return False
            
        try:
            print("üéØ Lancement de la d√©monstration...")
            result = subprocess.run([sys.executable, str(demo_script)], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ D√©monstration termin√©e")
                return True
            else:
                print(f"‚ö†Ô∏è D√©monstration termin√©e avec des avertissements")
                return True
                
        except Exception as e:
            print(f"üí• Erreur lors de la d√©monstration: {e}")
            return False
            
    def run_tests(self):
        """Lance les tests"""
        print("\nüß™ TESTS AUTOMATIS√âS")
        print("-" * 40)
        
        test_script = self.project_root / 'test_interactive_navigation.py'
        if not test_script.exists():
            print("‚ùå Script de test non trouv√©")
            return False
            
        try:
            print("üî¨ Ex√©cution des tests...")
            result = subprocess.run([sys.executable, str(test_script)], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Tous les tests sont pass√©s")
                return True
            else:
                print(f"‚ö†Ô∏è Certains tests ont √©chou√© (code: {result.returncode})")
                return False
                
        except Exception as e:
            print(f"üí• Erreur lors des tests: {e}")
            return False
            
    def run_maintenance(self):
        """Lance la maintenance"""
        print("\nüîß MAINTENANCE SYST√àME")
        print("-" * 40)
        
        maintenance_script = self.project_root / 'maintenance_interactive_navigation.py'
        if not maintenance_script.exists():
            print("‚ùå Script de maintenance non trouv√©")
            return False
            
        try:
            print("üõ†Ô∏è Lancement de la maintenance...")
            result = subprocess.run([sys.executable, str(maintenance_script)], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Maintenance termin√©e avec succ√®s")
                return True
            else:
                print(f"‚ö†Ô∏è Maintenance termin√©e avec des avertissements")
                return True
                
        except Exception as e:
            print(f"üí• Erreur lors de la maintenance: {e}")
            return False
            
    def start_navigation(self):
        """D√©marre la navigation interactive"""
        print("\nüåê NAVIGATION INTERACTIVE")
        print("-" * 40)
        
        navigator_script = self.project_root / 'interactive_web_navigator.py'
        if not navigator_script.exists():
            print("‚ùå Navigateur interactif non trouv√©")
            return False
            
        print("üéØ D√©marrage de la navigation interactive...")
        print("üí° Utilisez Ctrl+C pour arr√™ter")
        
        try:
            result = subprocess.run([sys.executable, str(navigator_script)], 
                                  capture_output=False, text=True)
            
            print(f"\nüèÅ Navigation termin√©e (code: {result.returncode})")
            return True
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Navigation interrompue par l'utilisateur")
            return True
        except Exception as e:
            print(f"üí• Erreur lors de la navigation: {e}")
            return False
            
    def generate_status_report(self):
        """G√©n√®re un rapport de statut"""
        print("\nüìä RAPPORT DE STATUT")
        print("-" * 40)
        
        status = {
            "timestamp": datetime.now().isoformat(),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "project_root": str(self.project_root),
            "files_status": {},
            "config_status": {}
        }
        
        # V√©rification des fichiers
        critical_files = [
            'interactive_web_navigator.py',
            'gemini_interactive_adapter.py',
            'install_interactive_navigation.py',
            'demo_interactive_navigation.py',
            'test_interactive_navigation.py',
            'maintenance_interactive_navigation.py',
            'GUIDE_NAVIGATION_INTERACTIVE.md'
        ]
        
        for file_name in critical_files:
            file_path = self.project_root / file_name
            status["files_status"][file_name] = {
                "exists": file_path.exists(),
                "size": file_path.stat().st_size if file_path.exists() else 0,
                "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat() if file_path.exists() else None
            }
            
        # V√©rification de la configuration
        config_files = ['.env', 'ai_api_config.json']
        for config_file in config_files:
            config_path = self.project_root / config_file
            status["config_status"][config_file] = {
                "exists": config_path.exists(),
                "configured": True  # Simplifi√© pour cet exemple
            }
            
        # Affichage du rapport
        print(f"üìÖ Timestamp: {status['timestamp']}")
        print(f"üêç Python: {status['python_version']}")
        print(f"üìÅ Projet: {status['project_root']}")
        
        print("\nüìÅ FICHIERS:")
        for file_name, file_info in status["files_status"].items():
            status_icon = "‚úÖ" if file_info["exists"] else "‚ùå"
            size_info = f"({file_info['size']} bytes)" if file_info["exists"] else ""
            print(f"   {status_icon} {file_name} {size_info}")
            
        print("\n‚öôÔ∏è CONFIGURATION:")
        for config_name, config_info in status["config_status"].items():
            status_icon = "‚úÖ" if config_info["exists"] else "‚ùå"
            print(f"   {status_icon} {config_name}")
            
        # Sauvegarde du rapport
        report_file = f"status_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(status, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Rapport sauvegard√©: {report_file}")
        
        return True
        
    def run_diagnostics(self):
        """Lance le diagnostic"""
        print("\nüîç DIAGNOSTIC SYST√àME")
        print("-" * 40)
        
        issues = []
        
        # Diagnostic des imports
        print("üî¨ Test des imports...")
        test_modules = [
            'google.generativeai',
            'selenium',
            'requests',
            'bs4',
            'PIL'
        ]
        
        for module in test_modules:
            try:
                __import__(module)
                print(f"   ‚úÖ {module}")
            except ImportError:
                print(f"   ‚ùå {module}")
                issues.append(f"Module manquant: {module}")
                
        # Diagnostic de la configuration
        print("\n‚öôÔ∏è V√©rification configuration...")
        env_file = self.project_root / '.env'
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                env_content = f.read()
                
            if 'GEMINI_API_KEY=votre_cle_api_ici' in env_content:
                print("   ‚ö†Ô∏è Cl√© API non configur√©e")
                issues.append("Cl√© API Gemini non configur√©e")
            else:
                print("   ‚úÖ Configuration API")
        else:
            print("   ‚ùå Fichier .env manquant")
            issues.append("Fichier de configuration manquant")
            
        # R√©sum√© du diagnostic
        print(f"\nüìã R√âSUM√â:")
        if not issues:
            print("üéâ Aucun probl√®me d√©tect√© !")
        else:
            print(f"‚ö†Ô∏è {len(issues)} probl√®me(s) d√©tect√©(s):")
            for i, issue in enumerate(issues, 1):
                print(f"   {i}. {issue}")
                
        return len(issues) == 0
        
    def show_guide(self):
        """Affiche le guide d'utilisation"""
        print("\nüìñ GUIDE D'UTILISATION")
        print("-" * 40)
        
        guide_file = self.project_root / 'GUIDE_NAVIGATION_INTERACTIVE.md'
        if guide_file.exists():
            print(f"üìö Guide disponible: {guide_file.name}")
            print("üí° Ouvrez ce fichier dans un √©diteur markdown pour la documentation compl√®te")
            
            # Affichage des premi√®res lignes
            try:
                with open(guide_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()[:20]
                    
                print("\nüìã APER√áU:")
                for line in lines:
                    print(f"   {line.rstrip()}")
                    
                if len(lines) >= 20:
                    print("   ... (voir le fichier complet pour plus de d√©tails)")
                    
            except Exception as e:
                print(f"‚ùå Erreur lecture du guide: {e}")
        else:
            print("‚ùå Guide non trouv√©")
            print("üí° Consultez README.md ou la documentation en ligne")
            
        return True
        
    def configure_system(self):
        """Configuration interactive du syst√®me"""
        print("\n‚öôÔ∏è CONFIGURATION SYST√àME")
        print("-" * 40)
        
        env_file = self.project_root / '.env'
        
        print("üîë Configuration de la cl√© API Gemini")
        current_key = "non configur√©e"
        
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'GEMINI_API_KEY=' in content:
                    for line in content.split('\n'):
                        if line.startswith('GEMINI_API_KEY='):
                            key_value = line.split('=', 1)[1]
                            if key_value and key_value != 'votre_cle_api_ici':
                                current_key = "configur√©e"
                            break
                            
        print(f"üìä Statut actuel: {current_key}")
        
        if current_key == "non configur√©e":
            print("\nüí° Pour configurer votre cl√© API:")
            print("   1. Obtenez une cl√© API sur https://makersuite.google.com/app/apikey")
            print("   2. √âditez le fichier .env")
            print("   3. Remplacez 'votre_cle_api_ici' par votre vraie cl√©")
            print("   4. Relancez ce configurateur")
        else:
            print("‚úÖ Cl√© API configur√©e")
            
        return True
        
    def run_interactive_menu(self):
        """Lance le menu interactif principal"""
        while True:
            self.print_header()
            
            # V√©rification rapide des pr√©requis
            prereq_ok = self.check_prerequisites()
            if not prereq_ok:
                print("\n‚ö†Ô∏è ATTENTION: Pr√©requis non satisfaits")
                print("üí° Recommandation: Commencez par l'installation (option 1)")
                
            self.print_menu()
            
            try:
                choice = input("\nüéØ Votre choix (0-9): ").strip()
                
                if choice not in self.available_actions:
                    print("‚ùå Choix invalide. Veuillez s√©lectionner 0-9.")
                    input("Appuyez sur Entr√©e pour continuer...")
                    continue
                    
                action = self.available_actions[choice]
                
                if action == "exit":
                    print("\nüëã Au revoir !")
                    break
                    
                # Ex√©cution de l'action
                print(f"\nüöÄ Ex√©cution: {action}")
                time.sleep(0.5)  # Petite pause pour l'UX
                
                if action == "install":
                    self.run_installation()
                elif action == "demo":
                    self.run_demo()
                elif action == "test":
                    self.run_tests()
                elif action == "maintenance":
                    self.run_maintenance()
                elif action == "navigate":
                    self.start_navigation()
                elif action == "status":
                    self.generate_status_report()
                elif action == "diagnose":
                    self.run_diagnostics()
                elif action == "guide":
                    self.show_guide()
                elif action == "config":
                    self.configure_system()
                    
                input("\n‚è∏Ô∏è Appuyez sur Entr√©e pour revenir au menu...")
                
            except KeyboardInterrupt:
                print("\n\nüëã Au revoir !")
                break
            except Exception as e:
                print(f"\nüí• Erreur: {e}")
                input("Appuyez sur Entr√©e pour continuer...")

def main():
    """Point d'entr√©e principal"""
    launcher = InteractiveNavigationLauncher()
    
    try:
        launcher.run_interactive_menu()
        return True
    except Exception as e:
        print(f"üí• Erreur critique: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
