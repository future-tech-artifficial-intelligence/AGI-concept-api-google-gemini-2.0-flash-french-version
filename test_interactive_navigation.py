"""
Test Complet du Syst√®me de Navigation Interactive avec l'API Gemini
Ce script teste l'int√©gration compl√®te du nouveau syst√®me d'interaction web
"""

import logging
import json
import time
import os
import sys
from datetime import datetime
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('GeminiInteractiveNavigationTest')

class GeminiInteractiveNavigationTester:
    """Testeur complet pour le syst√®me de navigation interactive avec Gemini"""
    
    def __init__(self):
        self.test_results = {}
        self.errors = []
        self.passed_tests = 0
        self.total_tests = 0
        
        # Cr√©er le r√©pertoire de tests
        self.test_dir = Path("test_results_interactive")
        self.test_dir.mkdir(exist_ok=True)
        
        logger.info("üß™ Testeur Gemini-Navigation Interactive initialis√©")
    
    def log_test_result(self, test_name: str, success: bool, message: str = "", data: dict = None):
        """Enregistre le r√©sultat d'un test"""
        self.total_tests += 1
        if success:
            self.passed_tests += 1
            logger.info(f"‚úÖ {test_name}: {message}")
        else:
            logger.error(f"‚ùå {test_name}: {message}")
            self.errors.append(f"{test_name}: {message}")
        
        self.test_results[test_name] = {
            'success': success,
            'message': message,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
    
    def test_module_imports(self):
        """Test 1: V√©rifier que tous les modules interactifs s'importent correctement"""
        logger.info("üì¶ Test 1: Imports des Modules Interactifs")
        
        imported_modules = {}
        
        # Test imports du navigateur interactif
        try:
            from interactive_web_navigator import (
                InteractiveWebNavigator,
                InteractiveElementAnalyzer,
                get_interactive_navigator,
                initialize_interactive_navigator
            )
            imported_modules['interactive_web_navigator'] = True
            self.log_test_result("Import Navigateur Interactif", True, "Module charg√©")
        except ImportError as e:
            imported_modules['interactive_web_navigator'] = False
            self.log_test_result("Import Navigateur Interactif", False, f"Erreur: {str(e)}")
        
        # Test imports de l'adaptateur Gemini interactif
        try:
            from gemini_interactive_adapter import (
                GeminiInteractiveWebAdapter,
                get_gemini_interactive_adapter,
                initialize_gemini_interactive_adapter,
                handle_gemini_interactive_request,
                detect_interactive_need
            )
            imported_modules['gemini_interactive_adapter'] = True
            self.log_test_result("Import Adaptateur Gemini Interactif", True, "Module charg√©")
        except ImportError as e:
            imported_modules['gemini_interactive_adapter'] = False
            self.log_test_result("Import Adaptateur Gemini Interactif", False, f"Erreur: {str(e)}")
        
        # Test import de l'adaptateur Gemini principal
        try:
            from gemini_api_adapter import GeminiAPI
            imported_modules['gemini_api_adapter'] = True
            self.log_test_result("Import Adaptateur Gemini Principal", True, "Module charg√©")
        except ImportError as e:
            imported_modules['gemini_api_adapter'] = False
            self.log_test_result("Import Adaptateur Gemini Principal", False, f"Erreur: {str(e)}")
        
        # Test imports Selenium (optionnel)
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            imported_modules['selenium'] = True
            self.log_test_result("Import Selenium", True, "WebDriver disponible")
        except ImportError as e:
            imported_modules['selenium'] = False
            self.log_test_result("Import Selenium", False, f"WebDriver non disponible: {str(e)}")
        
        success_rate = sum(imported_modules.values()) / len(imported_modules) * 100
        overall_success = success_rate >= 75  # Au moins 75% des modules requis
        
        self.log_test_result("Imports Modules Globaux", overall_success,
                           f"Taux de r√©ussite: {success_rate:.1f}%",
                           {'modules': imported_modules})
        
        return imported_modules
    
    def test_interactive_navigator_initialization(self):
        """Test 2: Initialiser le navigateur interactif"""
        logger.info("üöÄ Test 2: Initialisation Navigateur Interactif")
        
        try:
            from interactive_web_navigator import initialize_interactive_navigator, get_interactive_navigator
            
            # Tenter l'initialisation
            navigator = initialize_interactive_navigator()
            
            if navigator:
                self.log_test_result("Initialisation Navigateur", True, "Navigateur initialis√© avec succ√®s")
                
                # V√©rifier l'acc√®s global
                global_navigator = get_interactive_navigator()
                if global_navigator:
                    self.log_test_result("V√©rification Navigateur Global", True, "Navigateur accessible globalement")
                    return navigator
                else:
                    self.log_test_result("V√©rification Navigateur Global", False, "Navigateur non accessible")
                    return None
            else:
                self.log_test_result("Initialisation Navigateur", False, "√âchec de l'initialisation (normal si ChromeDriver absent)")
                return None
                
        except Exception as e:
            self.log_test_result("Test Initialisation Navigateur", False, f"Erreur: {str(e)}")
            return None
    
    def test_gemini_interactive_adapter_initialization(self):
        """Test 3: Initialiser l'adaptateur interactif Gemini"""
        logger.info("üîó Test 3: Initialisation Adaptateur Gemini Interactif")
        
        try:
            from gemini_interactive_adapter import initialize_gemini_interactive_adapter, get_gemini_interactive_adapter
            
            # Initialiser l'adaptateur
            adapter = initialize_gemini_interactive_adapter()
            
            if adapter:
                self.log_test_result("Initialisation Adaptateur Gemini", True, "Adaptateur initialis√©")
                
                # V√©rifier l'acc√®s global
                global_adapter = get_gemini_interactive_adapter()
                if global_adapter:
                    self.log_test_result("V√©rification Adaptateur Global", True, "Adaptateur accessible")
                    
                    # V√©rifier les statistiques
                    stats = adapter.get_interaction_statistics()
                    self.log_test_result("Statistiques Adaptateur", True, f"Stats: {stats}")
                    
                    return adapter
                else:
                    self.log_test_result("V√©rification Adaptateur Global", False, "Adaptateur non accessible")
                    return None
            else:
                self.log_test_result("Initialisation Adaptateur Gemini", False, "√âchec de l'initialisation")
                return None
                
        except Exception as e:
            self.log_test_result("Test Adaptateur Gemini", False, f"Erreur: {str(e)}")
            return None
    
    def test_interaction_detection(self):
        """Test 4: Tester la d√©tection d'interactions"""
        logger.info("üîç Test 4: D√©tection d'Interactions")
        
        try:
            from gemini_interactive_adapter import detect_interactive_need
            
            # Tests de d√©tection avec diff√©rents prompts
            test_cases = [
                {
                    'prompt': "Clique sur l'onglet Services de ce site web",
                    'expected_interaction': True,
                    'expected_type': 'direct_interaction'
                },
                {
                    'prompt': "Explore tous les onglets de https://example.com",
                    'expected_interaction': True,
                    'expected_type': 'tab_navigation'
                },
                {
                    'prompt': "Explore toutes les options disponibles sur le site",
                    'expected_interaction': True,
                    'expected_type': 'full_exploration'
                },
                {
                    'prompt': "Remplis le formulaire de contact",
                    'expected_interaction': True,
                    'expected_type': 'form_interaction'
                },
                {
                    'prompt': "Qu'est-ce que l'intelligence artificielle ?",
                    'expected_interaction': False,
                    'expected_type': None
                }
            ]
            
            detection_results = []
            successful_detections = 0
            
            for test_case in test_cases:
                prompt = test_case['prompt']
                expected_interaction = test_case['expected_interaction']
                expected_type = test_case['expected_type']
                
                logger.info(f"  üß™ Test d√©tection: '{prompt}'")
                
                # Effectuer la d√©tection
                detection = detect_interactive_need(prompt)
                
                # V√©rifier le r√©sultat
                detected_interaction = detection.get('requires_interaction', False)
                detected_type = detection.get('interaction_type')
                confidence = detection.get('confidence', 0)
                
                # √âvaluer la pr√©cision
                type_match = (detected_type == expected_type) if expected_interaction else (detected_type is None)
                detection_success = (detected_interaction == expected_interaction) and type_match
                
                if detection_success:
                    successful_detections += 1
                    status = "‚úÖ"
                    details = f"D√©tection correcte (confiance: {confidence:.2f})"
                else:
                    status = "‚ùå"
                    details = f"Attendu: {expected_type}, D√©tect√©: {detected_type} (confiance: {confidence:.2f})"
                
                detection_results.append({
                    'prompt': prompt,
                    'expected': {'interaction': expected_interaction, 'type': expected_type},
                    'detected': {'interaction': detected_interaction, 'type': detected_type, 'confidence': confidence},
                    'success': detection_success,
                    'status': status
                })
                
                logger.info(f"    {status} {details}")
            
            # √âvaluer le taux de r√©ussite global
            success_rate = (successful_detections / len(test_cases)) * 100
            overall_success = success_rate >= 80  # Au moins 80% de r√©ussite
            
            self.log_test_result("D√©tection Interactions", overall_success,
                               f"Taux de r√©ussite: {success_rate:.1f}% ({successful_detections}/{len(test_cases)})",
                               {'results': detection_results})
            
            return detection_results
            
        except Exception as e:
            self.log_test_result("Test D√©tection", False, f"Erreur: {str(e)}")
            return None
    
    def test_element_analysis_simulation(self):
        """Test 5: Simulation d'analyse d'√©l√©ments (sans navigateur)"""
        logger.info("üî¨ Test 5: Simulation Analyse √âl√©ments")
        
        try:
            from interactive_web_navigator import InteractiveElementAnalyzer
            
            # Cr√©er l'analyseur
            analyzer = InteractiveElementAnalyzer()
            self.log_test_result("Cr√©ation Analyseur", True, "Analyseur cr√©√©")
            
            # Tester les s√©lecteurs CSS
            selectors_test = True
            for element_type, selectors in analyzer.element_selectors.items():
                if not selectors or not isinstance(selectors, list):
                    selectors_test = False
                    break
            
            self.log_test_result("Validation S√©lecteurs CSS", selectors_test, 
                               f"S√©lecteurs pour {len(analyzer.element_selectors)} types d'√©l√©ments")
            
            # Tester les mots-cl√©s d'importance
            keywords_test = True
            for importance, keywords in analyzer.importance_keywords.items():
                if not keywords or not isinstance(keywords, list):
                    keywords_test = False
                    break
            
            self.log_test_result("Validation Mots-cl√©s", keywords_test,
                               f"Mots-cl√©s pour {len(analyzer.importance_keywords)} niveaux d'importance")
            
            # Test de calcul de score d'interaction
            test_scores = [
                analyzer._calculate_interaction_score("Next", {'id': 'next-btn'}, 'buttons', {'x': 100, 'y': 200, 'width': 80, 'height': 30}),
                analyzer._calculate_interaction_score("Home", {'class': 'nav-link'}, 'navigation', {'x': 50, 'y': 50, 'width': 60, 'height': 20}),
                analyzer._calculate_interaction_score("", {}, 'inputs', {'x': 200, 'y': 800, 'width': 120, 'height': 25})
            ]
            
            score_test = all(0 <= score <= 1 for score in test_scores)
            self.log_test_result("Calcul Scores Interaction", score_test,
                               f"Scores calcul√©s: {[f'{s:.2f}' for s in test_scores]}")
            
            return analyzer
            
        except Exception as e:
            self.log_test_result("Test Analyse √âl√©ments", False, f"Erreur: {str(e)}")
            return None
    
    def test_gemini_api_integration(self):
        """Test 6: Test d'int√©gration avec l'API Gemini"""
        logger.info("ü§ñ Test 6: Int√©gration API Gemini")
        
        try:
            from gemini_api_adapter import GeminiAPI
            
            # Cr√©er une instance de l'API
            gemini_api = GeminiAPI()
            self.log_test_result("Cr√©ation Instance Gemini", True, "Instance cr√©√©e")
            
            # V√©rifier que le syst√®me interactif est int√©gr√©
            has_interactive = hasattr(gemini_api, 'interactive_navigation_available')
            self.log_test_result("Int√©gration Syst√®me Interactif", has_interactive,
                               f"Syst√®me interactif {'disponible' if has_interactive else 'non disponible'}")
            
            # Test de prompts interactifs (simulation)
            interactive_prompts = [
                "Clique sur l'onglet produits de https://example.com",
                "Explore tous les onglets de ce site web",
                "Remplis le formulaire de contact"
            ]
            
            integration_results = []
            
            for prompt in interactive_prompts:
                logger.info(f"  üß™ Test prompt: '{prompt[:50]}...'")
                
                try:
                    # Utiliser la m√©thode fallback pour √©viter les appels API r√©els
                    if hasattr(gemini_api, '_fallback_get_response'):
                        response = gemini_api._fallback_get_response(
                            prompt=prompt,
                            user_id=1,
                            session_id="test_interactive_session"
                        )
                        
                        if response and 'response' in response:
                            integration_results.append({
                                'prompt': prompt,
                                'success': True,
                                'has_response': True,
                                'response_length': len(response['response'])
                            })
                        else:
                            integration_results.append({
                                'prompt': prompt,
                                'success': False,
                                'error': 'Pas de r√©ponse'
                            })
                    else:
                        integration_results.append({
                            'prompt': prompt,
                            'success': False,
                            'error': 'M√©thode fallback non disponible'
                        })
                        
                except Exception as e:
                    integration_results.append({
                        'prompt': prompt,
                        'success': False,
                        'error': str(e)
                    })
                
                time.sleep(0.5)  # Petit d√©lai
            
            success_count = sum(1 for r in integration_results if r['success'])
            success_rate = (success_count / len(interactive_prompts)) * 100
            
            self.log_test_result("Tests Prompts Interactifs", success_count > 0,
                               f"Taux de r√©ussite: {success_rate:.1f}% ({success_count}/{len(interactive_prompts)})",
                               {'results': integration_results})
            
            return gemini_api
            
        except Exception as e:
            self.log_test_result("Test Int√©gration Gemini", False, f"Erreur: {str(e)}")
            return None
    
    def test_session_management(self):
        """Test 7: Test de gestion des sessions"""
        logger.info("üìã Test 7: Gestion des Sessions")
        
        try:
            from interactive_web_navigator import create_interactive_navigation_session, close_interactive_session
            
            # Test de cr√©ation de session
            session_id = f"test_session_{int(time.time())}"
            test_url = "https://httpbin.org/html"
            goals = ['test_navigation', 'element_analysis']
            
            try:
                session_result = create_interactive_navigation_session(session_id, test_url, goals)
                
                if session_result.get('success', False):
                    self.log_test_result("Cr√©ation Session", True,
                                       f"Session cr√©√©e: {session_id}")
                    
                    # Test de fermeture de session
                    close_result = close_interactive_session(session_id)
                    
                    if close_result.get('success', False):
                        self.log_test_result("Fermeture Session", True,
                                           f"Session ferm√©e avec rapport")
                        return True
                    else:
                        self.log_test_result("Fermeture Session", False,
                                           f"Erreur: {close_result.get('error', 'Inconnue')}")
                        return False
                else:
                    self.log_test_result("Cr√©ation Session", False,
                                       f"Erreur: {session_result.get('error', 'Inconnue')}")
                    return False
                    
            except Exception as e:
                self.log_test_result("Test Session", False, f"Erreur session: {str(e)}")
                return False
                
        except Exception as e:
            self.log_test_result("Test Gestion Sessions", False, f"Erreur: {str(e)}")
            return False
    
    def generate_test_report(self):
        """G√©n√®re un rapport de test complet"""
        logger.info("üìã G√©n√©ration du rapport de test")
        
        # Calculer les statistiques g√©n√©rales
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        # Cr√©er le rapport
        report = {
            'test_summary': {
                'timestamp': datetime.now().isoformat(),
                'total_tests': self.total_tests,
                'passed_tests': self.passed_tests,
                'failed_tests': self.total_tests - self.passed_tests,
                'success_rate': success_rate,
                'overall_status': 'PASSED' if success_rate >= 70 else 'FAILED'
            },
            'test_results': self.test_results,
            'errors': self.errors
        }
        
        # Sauvegarder le rapport JSON
        report_file = self.test_dir / f"interactive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # Cr√©er un rapport markdown
        self._create_markdown_report(report)
        
        return report
    
    def _create_markdown_report(self, report):
        """Cr√©e un rapport markdown"""
        report_file = self.test_dir / f"interactive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("# Rapport de Test - Syst√®me de Navigation Interactive Gemini\n\n")
            f.write(f"**Date:** {report['test_summary']['timestamp']}\n\n")
            f.write(f"## R√©sum√©\n\n")
            f.write(f"- **Tests totaux:** {report['test_summary']['total_tests']}\n")
            f.write(f"- **Tests r√©ussis:** {report['test_summary']['passed_tests']}\n")
            f.write(f"- **Tests √©chou√©s:** {report['test_summary']['failed_tests']}\n")
            f.write(f"- **Taux de r√©ussite:** {report['test_summary']['success_rate']:.1f}%\n")
            f.write(f"- **Statut global:** {report['test_summary']['overall_status']}\n\n")
            
            f.write("## D√©tails des Tests\n\n")
            for test_name, result in report['test_results'].items():
                status = "‚úÖ" if result['success'] else "‚ùå"
                f.write(f"### {status} {test_name}\n")
                f.write(f"**Message:** {result['message']}\n\n")
                if result.get('data'):
                    f.write(f"**Donn√©es:** ```json\n{json.dumps(result['data'], indent=2)}\n```\n\n")
            
            if report['errors']:
                f.write("## Erreurs\n\n")
                for error in report['errors']:
                    f.write(f"- {error}\n")
    
    def run_all_tests(self):
        """Lance tous les tests"""
        logger.info("üöÄ D√âMARRAGE DES TESTS SYST√àME INTERACTIF")
        logger.info("=" * 60)
        
        start_time = time.time()
        
        try:
            # Test 1: Imports
            imported_modules = self.test_module_imports()
            
            # Test 2: Initialisation navigateur interactif
            navigator = self.test_interactive_navigator_initialization()
            
            # Test 3: Initialisation adaptateur Gemini
            adapter = self.test_gemini_interactive_adapter_initialization()
            
            # Test 4: D√©tection d'interactions
            self.test_interaction_detection()
            
            # Test 5: Analyse d'√©l√©ments
            analyzer = self.test_element_analysis_simulation()
            
            # Test 6: Int√©gration API Gemini
            gemini_api = self.test_gemini_api_integration()
            
            # Test 7: Gestion des sessions
            self.test_session_management()
            
        except Exception as e:
            logger.error(f"Erreur lors des tests: {str(e)}")
            self.log_test_result("Ex√©cution Globale", False, f"Erreur critique: {str(e)}")
        
        total_time = time.time() - start_time
        
        # G√©n√©rer le rapport
        report = self.generate_test_report()
        
        # Afficher le r√©sum√© final
        logger.info("=" * 60)
        logger.info("üèÅ TESTS TERMIN√âS - SYST√àME INTERACTIF")
        logger.info(f"‚è±Ô∏è Temps total: {total_time:.2f}s")
        logger.info(f"üìä R√©sultats: {self.passed_tests}/{self.total_tests} tests r√©ussis ({report['test_summary']['success_rate']:.1f}%)")
        
        if report['test_summary']['overall_status'] == 'PASSED':
            logger.info("üéâ TOUS LES TESTS PRINCIPAUX SONT PASS√âS !")
            logger.info("‚úÖ Le syst√®me de navigation interactive fonctionne avec Gemini")
        else:
            logger.info("‚ö†Ô∏è Certains tests ont √©chou√©")
            logger.info("üîß V√©rifiez les erreurs dans le rapport de test")
        
        logger.info("=" * 60)
        
        return report

def main():
    """Fonction principale"""
    logger.info("üåü D√©marrage des tests du syst√®me de navigation interactive Gemini")
    
    tester = GeminiInteractiveNavigationTester()
    report = tester.run_all_tests()
    
    # Retourner le succ√®s bas√© sur le taux de r√©ussite
    success = report['test_summary']['success_rate'] >= 70
    
    if success:
        logger.info("‚úÖ Tests termin√©s avec succ√®s - Le syst√®me est op√©rationnel")
        print("\nüéØ SYST√àME DE NAVIGATION INTERACTIVE GEMINI OP√âRATIONNEL")
        print("üìñ Consultez les rapports de test pour plus de d√©tails")
    else:
        logger.error("‚ùå Tests √©chou√©s - Des probl√®mes ont √©t√© d√©tect√©s")
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS DANS LE SYST√àME")
        print("üîß Consultez les rapports d'erreur pour r√©soudre les probl√®mes")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
