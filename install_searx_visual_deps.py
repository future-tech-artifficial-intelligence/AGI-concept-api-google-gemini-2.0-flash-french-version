#!/usr/bin/env python3
"""
Installation des d√©pendances pour le syst√®me de capture visuelle Searx
"""

import subprocess
import sys
import logging
import os
import platform
import requests
import zipfile
import shutil

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('searx_visual_deps_installer')

def install_package(package_name):
    """Installe un package Python avec pip"""
    try:
        logger.info(f"Installation de {package_name}...")
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', package_name
        ], capture_output=True, text=True, check=True)
        
        logger.info(f"‚úÖ {package_name} install√© avec succ√®s")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de l'installation de {package_name}: {e.stderr}")
        return False

def check_chrome_installed():
    """V√©rifie si Chrome est install√©"""
    try:
        if platform.system() == "Windows":
            chrome_paths = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
            ]
            return any(os.path.exists(path) for path in chrome_paths)
        else:
            result = subprocess.run(['which', 'google-chrome'], capture_output=True, text=True)
            return result.returncode == 0
    except:
        return False

def check_edge_installed():
    """V√©rifie si Edge est install√©"""
    try:
        if platform.system() == "Windows":
            edge_paths = [
                r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe",
                r"C:\Program Files\Microsoft\Edge\Application\msedge.exe"
            ]
            return any(os.path.exists(path) for path in edge_paths)
        else:
            result = subprocess.run(['which', 'microsoft-edge'], capture_output=True, text=True)
            return result.returncode == 0
    except:
        return False

def download_chromedriver():
    """T√©l√©charge ChromeDriver automatiquement"""
    try:
        logger.info("T√©l√©chargement de ChromeDriver...")
        
        # D√©terminer la version de Chrome
        if platform.system() == "Windows":
            chrome_path = None
            for path in [r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"]:
                if os.path.exists(path):
                    chrome_path = path
                    break
            
            if not chrome_path:
                logger.warning("Chrome non trouv√© pour d√©terminer la version")
                return False
        
        # Utiliser webdriver-manager pour une installation automatique
        logger.info("Utilisation de webdriver-manager pour l'installation automatique")
        return True
        
    except Exception as e:
        logger.error(f"Erreur t√©l√©chargement ChromeDriver: {e}")
        return False

def main():
    """Installe toutes les d√©pendances n√©cessaires pour la capture visuelle"""
    logger.info("üîß Installation des d√©pendances pour la capture visuelle Searx")
    
    # D√©pendances Python
    dependencies = [
        'selenium',              # WebDriver pour automation navigateur
        'webdriver-manager',     # Gestion automatique des drivers
        'Pillow',               # Traitement d'images
    ]
    
    success_count = 0
    total_count = len(dependencies)
    
    # Installation des packages Python
    for package in dependencies:
        if install_package(package):
            success_count += 1
    
    logger.info(f"üìä Installation Python termin√©e: {success_count}/{total_count} packages install√©s")
    
    # V√©rification des navigateurs
    logger.info("üåê V√©rification des navigateurs disponibles...")
    
    chrome_available = check_chrome_installed()
    edge_available = check_edge_installed()
    
    if chrome_available:
        logger.info("‚úÖ Google Chrome d√©tect√©")
    else:
        logger.warning("‚ö†Ô∏è Google Chrome non d√©tect√©")
    
    if edge_available:
        logger.info("‚úÖ Microsoft Edge d√©tect√©")
    else:
        logger.warning("‚ö†Ô∏è Microsoft Edge non d√©tect√©")
    
    if not chrome_available and not edge_available:
        logger.error("‚ùå Aucun navigateur compatible d√©tect√©")
        logger.error("Veuillez installer Google Chrome ou Microsoft Edge")
        return False
    
    # Test d'importation
    logger.info("üß™ Test des imports...")
    
    try:
        import selenium
        from selenium import webdriver
        logger.info("‚úÖ Selenium import√© avec succ√®s")
        
        import PIL
        logger.info("‚úÖ Pillow import√© avec succ√®s")
        
        from webdriver_manager.chrome import ChromeDriverManager
        logger.info("‚úÖ WebDriver Manager import√© avec succ√®s")
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import: {e}")
        return False
    
    # Test rapide WebDriver
    logger.info("üîß Test rapide du WebDriver...")
    
    try:
        from selenium.webdriver.chrome.options import Options as ChromeOptions
        from webdriver_manager.chrome import ChromeDriverManager
        
        if chrome_available:
            options = ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            
            driver = webdriver.Chrome(
                service=webdriver.chrome.service.Service(ChromeDriverManager().install()),
                options=options
            )
            driver.get("about:blank")
            driver.quit()
            logger.info("‚úÖ Test WebDriver Chrome r√©ussi")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Test WebDriver Chrome √©chou√©: {e}")
        
        # Essayer Edge comme alternative
        try:
            from selenium.webdriver.edge.options import Options as EdgeOptions
            from webdriver_manager.microsoft import EdgeChromiumDriverManager
            
            if edge_available:
                options = EdgeOptions()
                options.add_argument('--headless')
                
                driver = webdriver.Edge(
                    service=webdriver.edge.service.Service(EdgeChromiumDriverManager().install()),
                    options=options
                )
                driver.get("about:blank")
                driver.quit()
                logger.info("‚úÖ Test WebDriver Edge r√©ussi")
                
        except Exception as e2:
            logger.error(f"‚ùå Test WebDriver Edge aussi √©chou√©: {e2}")
            logger.error("La capture visuelle pourrait ne pas fonctionner")
            return False
    
    logger.info("üéâ Installation termin√©e avec succ√®s !")
    logger.info("Le syst√®me de capture visuelle Searx est pr√™t √† l'emploi")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        logger.error("\nüí° Solutions possibles:")
        logger.error("1. Installer Google Chrome: https://www.google.com/chrome/")
        logger.error("2. Installer Microsoft Edge: https://www.microsoft.com/edge")
        logger.error("3. V√©rifier les permissions d'installation")
        logger.error("4. R√©essayer avec des droits administrateur")
    
    sys.exit(0 if success else 1)
