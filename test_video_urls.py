#!/usr/bin/env python3
"""
Test sp√©cifique pour les URLs vid√©o
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from gemini_api import get_gemini_response, trigger_searx_search_session

def test_video_urls():
    """Test sp√©cifique pour les URLs vid√©o"""
    
    print("üé• Test des URLs vid√©o avec Searx + Gemini")
    print("=" * 60)
    
    # 1. Test de recherche vid√©o directe
    print("\n1. Test de recherche vid√©o Searx:")
    video_search = trigger_searx_search_session("ovni videos t√©moignages", "videos")
    print(f"   R√©sultat: {video_search}")
    
    # 2. Test avec Gemini - question sur OVNI qui devrait d√©clencher une recherche
    print("\n2. Test Gemini avec question OVNI:")
    test_question = "Trouve-moi des vid√©os r√©centes sur les observations d'OVNI"
    
    print(f"   Question: {test_question}")
    print("   Traitement en cours...")
    
    response = get_gemini_response(test_question)
    
    print(f"   Statut: {response['status']}")
    print(f"   Longueur r√©ponse: {len(response['response'])} caract√®res")
    print(f"\n   R√©ponse compl√®te:")
    print(f"   {response['response']}")
    
    # V√©rifier si la r√©ponse contient des "xxxxxxxxxx"
    if "xxxxxxxxxx" in response['response']:
        print("\n   ‚ùå PROBL√àME: La r√©ponse contient encore des 'xxxxxxxxxx'")
    else:
        print("\n   ‚úÖ Aucun 'xxxxxxxxxx' d√©tect√© dans la r√©ponse")
    
    print("\n‚úÖ Test des URLs vid√©o termin√©!")

if __name__ == "__main__":
    test_video_urls()
