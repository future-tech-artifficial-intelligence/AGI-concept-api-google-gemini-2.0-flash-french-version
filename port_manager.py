#!/usr/bin/env python3
"""
Gestionnaire intelligent de ports pour Searx
D√©tecte automatiquement les ports disponibles et g√®re les conflits
"""

import socket
import subprocess
import logging
import time
import platform
import psutil
from typing import Optional, List, Dict, Tuple
import json
import os

logger = logging.getLogger('PortManager')

class PortManager:
    """Gestionnaire intelligent de ports"""
    
    def __init__(self):
        self.default_ports = [8080, 8081, 8082, 8083, 8084]
        self.searx_port = None
        self.is_windows = platform.system().lower() == 'windows'
        
    def is_port_available(self, port: int, host: str = 'localhost') -> bool:
        """V√©rifie si un port est disponible"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                return result != 0  # Port libre si connexion √©choue
        except Exception as e:
            logger.error(f"Erreur v√©rification port {port}: {e}")
            return False
    
    def find_available_port(self, start_port: int = 8080, max_attempts: int = 100) -> Optional[int]:
        """Trouve un port disponible √† partir du port de d√©part"""
        for port in range(start_port, start_port + max_attempts):
            if self.is_port_available(port):
                logger.info(f"‚úÖ Port {port} disponible")
                return port
        
        logger.error(f"‚ùå Aucun port disponible dans la plage {start_port}-{start_port + max_attempts}")
        return None
    
    def get_process_using_port(self, port: int) -> Optional[Dict]:
        """Identifie le processus qui utilise un port"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    for conn in proc.connections():
                        if conn.laddr.port == port:
                            return {
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cmdline': ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else '',
                                'status': proc.status()
                            }
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except Exception as e:
            logger.error(f"Erreur identification processus sur port {port}: {e}")
        
        return None
    
    def kill_process_on_port(self, port: int) -> bool:
        """Tue le processus qui utilise un port sp√©cifique"""
        try:
            process_info = self.get_process_using_port(port)
            
            if not process_info:
                logger.info(f"Aucun processus trouv√© sur le port {port}")
                return True
            
            pid = process_info['pid']
            name = process_info['name']
            
            logger.warning(f"‚ö†Ô∏è  Processus d√©tect√© sur port {port}: {name} (PID: {pid})")
            
            # Demander confirmation pour des processus syst√®me critiques
            critical_processes = ['system', 'svchost.exe', 'winlogon.exe', 'csrss.exe']
            if name.lower() in critical_processes:
                logger.error(f"‚ùå Refus de tuer le processus syst√®me critique: {name}")
                return False
            
            # Tuer le processus
            try:
                proc = psutil.Process(pid)
                proc.terminate()
                proc.wait(timeout=5)
                logger.info(f"‚úÖ Processus {name} (PID: {pid}) termin√© avec succ√®s")
                
                # V√©rifier que le port est maintenant libre
                time.sleep(1)
                return self.is_port_available(port)
                
            except psutil.TimeoutExpired:
                # Force kill si termination douce √©choue
                proc.kill()
                logger.warning(f"üî• Processus {name} forc√© √† s'arr√™ter")
                time.sleep(1)
                return self.is_port_available(port)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t du processus sur port {port}: {e}")
            return False
    
    def free_port_with_confirmation(self, port: int) -> bool:
        """Lib√®re un port avec confirmation utilisateur"""
        if self.is_port_available(port):
            logger.info(f"‚úÖ Port {port} d√©j√† libre")
            return True
        
        process_info = self.get_process_using_port(port)
        if not process_info:
            logger.warning(f"‚ö†Ô∏è  Port {port} occup√© mais processus non identifiable")
            return False
        
        print(f"\nüîç Port {port} utilis√© par:")
        print(f"   Processus: {process_info['name']}")
        print(f"   PID: {process_info['pid']}")
        print(f"   Commande: {process_info['cmdline'][:100]}...")
        print(f"   Statut: {process_info['status']}")
        
        # Auto-kill pour les processus Docker/Searx connus
        safe_to_kill = [
            'docker', 'searx', 'nginx', 'httpd', 'apache2',
            'node.exe', 'python.exe', 'uwsgi', 'gunicorn'
        ]
        
        if any(safe_name in process_info['name'].lower() for safe_name in safe_to_kill):
            print(f"ü§ñ Processus identifi√© comme s√ªr √† arr√™ter: {process_info['name']}")
            return self.kill_process_on_port(port)
        else:
            print(f"‚ö†Ô∏è  Attention: processus non identifi√© comme s√ªr")
            response = input(f"Voulez-vous arr√™ter ce processus pour lib√©rer le port {port}? (o/N): ")
            
            if response.lower() in ['o', 'oui', 'y', 'yes']:
                return self.kill_process_on_port(port)
            else:
                print("‚ùå Arr√™t annul√© par l'utilisateur")
                return False
    
    def get_docker_compose_with_port(self, port: int) -> str:
        """G√©n√®re un docker-compose.yml avec le port sp√©cifi√©"""
        return f"""version: '3.8'

services:
  searx:
    image: searxng/searxng:latest
    container_name: searx-ai-{port}
    ports:
      - "{port}:8080"
    environment:
      - SEARXNG_BASE_URL=http://localhost:{port}
      - SEARXNG_SECRET=ai-search-secret-{port}
    volumes:
      - searx-data-{port}:/etc/searxng
    restart: unless-stopped
    networks:
      - searx-network-{port}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  searx-data-{port}:

networks:
  searx-network-{port}:
    driver: bridge
"""
    
    def setup_searx_with_available_port(self) -> Tuple[bool, int, str]:
        """Configure Searx avec un port disponible"""
        logger.info("üîç Recherche d'un port disponible pour Searx...")
        
        # Essayer le port par d√©faut d'abord
        preferred_port = 8080
        
        if self.is_port_available(preferred_port):
            selected_port = preferred_port
            logger.info(f"‚úÖ Port pr√©f√©r√© {preferred_port} disponible")
        else:
            # Essayer de lib√©rer le port 8080
            logger.info(f"üîÑ Tentative de lib√©ration du port {preferred_port}")
            if self.free_port_with_confirmation(preferred_port):
                selected_port = preferred_port
                logger.info(f"‚úÖ Port {preferred_port} lib√©r√© avec succ√®s")
            else:
                # Chercher un port alternatif
                logger.info("üîç Recherche d'un port alternatif...")
                selected_port = self.find_available_port(8081)
                
                if not selected_port:
                    logger.error("‚ùå Aucun port disponible trouv√©")
                    return False, 0, ""
        
        # G√©n√©rer le fichier docker-compose
        compose_content = self.get_docker_compose_with_port(selected_port)
        compose_filename = f"docker-compose.searx-port-{selected_port}.yml"
        
        try:
            with open(compose_filename, 'w', encoding='utf-8') as f:
                f.write(compose_content)
            
            logger.info(f"‚úÖ Configuration Searx cr√©√©e: {compose_filename}")
            logger.info(f"üöÄ Searx sera accessible sur: http://localhost:{selected_port}")
            
            self.searx_port = selected_port
            
            # Sauvegarder la configuration
            self._save_port_config(selected_port, compose_filename)
            
            return True, selected_port, compose_filename
            
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation configuration: {e}")
            return False, 0, ""
    
    def _save_port_config(self, port: int, compose_file: str):
        """Sauvegarde la configuration du port utilis√©"""
        config = {
            'searx_port': port,
            'compose_file': compose_file,
            'timestamp': time.time(),
            'url': f"http://localhost:{port}"
        }
        
        try:
            with open('searx_port_config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2)
            logger.info(f"‚úÖ Configuration sauvegard√©e: searx_port_config.json")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  Erreur sauvegarde configuration: {e}")
    
    def load_port_config(self) -> Optional[Dict]:
        """Charge la configuration du port sauvegard√©e"""
        try:
            if os.path.exists('searx_port_config.json'):
                with open('searx_port_config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # V√©rifier si la configuration est encore valide
                if self.is_port_available(config['searx_port']):
                    logger.warning(f"‚ö†Ô∏è  Port {config['searx_port']} n'est plus utilis√© par Searx")
                    return None
                
                logger.info(f"‚úÖ Configuration charg√©e: Searx sur port {config['searx_port']}")
                self.searx_port = config['searx_port']
                return config
            
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement configuration: {e}")
        
        return None
    
    def start_searx_smart(self) -> Tuple[bool, str]:
        """D√©marre Searx intelligemment avec gestion automatique des ports"""
        
        # Essayer de charger une configuration existante
        existing_config = self.load_port_config()
        
        if existing_config:
            logger.info(f"üîÑ Utilisation configuration existante: port {existing_config['searx_port']}")
            return self._start_with_compose(existing_config['compose_file']), existing_config['url']
        
        # Configurer un nouveau port
        success, port, compose_file = self.setup_searx_with_available_port()
        
        if not success:
            return False, ""
        
        # D√©marrer Searx
        if self._start_with_compose(compose_file):
            url = f"http://localhost:{port}"
            logger.info(f"üöÄ Searx d√©marr√© avec succ√®s sur: {url}")
            return True, url
        else:
            logger.error("‚ùå √âchec du d√©marrage de Searx")
            return False, ""
    
    def _start_with_compose(self, compose_file: str) -> bool:
        """D√©marre Searx avec un fichier docker-compose sp√©cifique"""
        try:
            # V√©rifier Docker
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("‚ùå Docker non disponible")
                return False
            
            # D√©marrer le conteneur
            logger.info(f"üê≥ D√©marrage Docker avec {compose_file}...")
            
            cmd = ['docker-compose', '-f', compose_file, 'up', '-d']
            result = subprocess.run(cmd, capture_output=True, text=True, cwd='.')
            
            if result.returncode == 0:
                logger.info("‚úÖ Conteneur Searx d√©marr√©")
                
                # Attendre que le service soit pr√™t
                logger.info("‚è≥ Attente de l'initialisation de Searx...")
                time.sleep(15)
                
                return True
            else:
                logger.error(f"‚ùå Erreur Docker: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage: {e}")
            return False
    
    def get_current_searx_url(self) -> Optional[str]:
        """Retourne l'URL Searx actuellement configur√©e"""
        config = self.load_port_config()
        if config:
            return config['url']
        
        # V√©rifier les ports par d√©faut
        for port in self.default_ports:
            if not self.is_port_available(port):
                # Port occup√©, potentiellement par Searx
                try:
                    import requests
                    response = requests.get(f"http://localhost:{port}/", timeout=5)
                    if response.status_code == 200 and 'searx' in response.text.lower():
                        logger.info(f"‚úÖ Searx d√©tect√© sur port {port}")
                        return f"http://localhost:{port}"
                except:
                    continue
        
        return None
    
    def stop_all_searx_containers(self) -> bool:
        """Arr√™te tous les conteneurs Searx"""
        try:
            # Lister les conteneurs Searx
            result = subprocess.run([
                'docker', 'ps', '--filter', 'name=searx-ai', '--format', '{{.Names}}'
            ], capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout.strip():
                containers = result.stdout.strip().split('\n')
                logger.info(f"üõë Arr√™t de {len(containers)} conteneur(s) Searx")
                
                for container in containers:
                    subprocess.run(['docker', 'stop', container], 
                                 capture_output=True, text=True)
                    subprocess.run(['docker', 'rm', container], 
                                 capture_output=True, text=True)
                
                # Nettoyer le fichier de config
                if os.path.exists('searx_port_config.json'):
                    os.remove('searx_port_config.json')
                
                logger.info("‚úÖ Tous les conteneurs Searx arr√™t√©s")
                return True
            else:
                logger.info("‚ÑπÔ∏è  Aucun conteneur Searx en cours d'ex√©cution")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t conteneurs: {e}")
            return False

# Instance globale
port_manager = PortManager()

def get_port_manager() -> PortManager:
    """Retourne l'instance du gestionnaire de ports"""
    return port_manager

if __name__ == "__main__":
    # Test du gestionnaire de ports
    pm = PortManager()
    
    print("üîß Test du gestionnaire de ports Searx")
    print("=" * 50)
    
    # Test de d√©tection de port
    print(f"Port 8080 disponible: {pm.is_port_available(8080)}")
    
    if not pm.is_port_available(8080):
        process = pm.get_process_using_port(8080)
        if process:
            print(f"Processus sur 8080: {process['name']} (PID: {process['pid']})")
    
    # Test de d√©marrage intelligent
    success, url = pm.start_searx_smart()
    if success:
        print(f"‚úÖ Searx d√©marr√©: {url}")
    else:
        print("‚ùå √âchec d√©marrage Searx")
