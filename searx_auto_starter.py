#!/usr/bin/env python3
"""
V√©rificateur et d√©marreur automatique pour le syst√®me Searx
S'assure que tout est pr√™t avant le d√©marrage de l'application principale
"""

import subprocess
import sys
import time
import logging
import os
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SearxAutoStart')

class SearxAutoStarter:
    """D√©marreur automatique du syst√®me Searx"""
    
    def __init__(self):
        self.docker_ready = False
        self.searx_ready = False
        
    def check_docker(self):
        """V√©rifie et d√©marre Docker si n√©cessaire"""
        logger.info("üê≥ V√©rification de Docker...")
        
        try:
            # V√©rifier si Docker est install√©
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode != 0:
                logger.error("‚ùå Docker n'est pas install√©")
                return False
            
            logger.info(f"‚úÖ Docker install√©: {result.stdout.strip()}")
            
            # V√©rifier si Docker daemon est actif
            result = subprocess.run(['docker', 'ps'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                logger.info("‚úÖ Docker daemon actif")
                self.docker_ready = True
                return True
            else:
                logger.warning("‚ö†Ô∏è Docker daemon non actif - tentative de d√©marrage...")
                return self._start_docker()
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Docker ne r√©pond pas")
            return False
        except FileNotFoundError:
            logger.error("‚ùå Docker non trouv√© dans le PATH")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur Docker: {e}")
            return False
    
    def _start_docker(self):
        """D√©marre Docker Desktop"""
        try:
            logger.info("üöÄ D√©marrage de Docker Desktop...")
            
            # Chemins possibles pour Docker Desktop
            docker_paths = [
                "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe",
                "C:\\Program Files (x86)\\Docker\\Docker\\Docker Desktop.exe"
            ]
            
            docker_exe = None
            for path in docker_paths:
                if os.path.exists(path):
                    docker_exe = path
                    break
            
            if not docker_exe:
                logger.error("‚ùå Docker Desktop non trouv√©")
                return False
            
            # D√©marrer Docker Desktop
            subprocess.Popen([docker_exe], shell=True)
            logger.info("‚è≥ Docker Desktop en cours de d√©marrage...")
            
            # Attendre que Docker soit pr√™t (max 60 secondes)
            max_wait = 60
            wait_time = 0
            
            while wait_time < max_wait:
                time.sleep(5)
                wait_time += 5
                
                try:
                    result = subprocess.run(['docker', 'ps'], 
                                          capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0:
                        logger.info("‚úÖ Docker Desktop d√©marr√© avec succ√®s!")
                        self.docker_ready = True
                        return True
                    else:
                        logger.info(f"‚è≥ Attente Docker... ({wait_time}/{max_wait}s)")
                
                except:
                    logger.info(f"‚è≥ Attente Docker... ({wait_time}/{max_wait}s)")
            
            logger.warning("‚ö†Ô∏è Docker prend plus de temps que pr√©vu")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage Docker: {e}")
            return False
    
    def ensure_searx_ready(self):
        """S'assure que Searx est pr√™t"""
        logger.info("üîç Pr√©paration du syst√®me Searx...")
        
        try:
            # Importer les modules Searx
            from port_manager import PortManager
            from searx_interface import SearxInterface
            
            # Initialiser le gestionnaire de ports
            port_manager = PortManager()
            
            # V√©rifier s'il y a d√©j√† une instance
            current_url = port_manager.get_current_searx_url()
            
            if current_url:
                logger.info(f"‚úÖ Searx existant d√©tect√©: {current_url}")
                
                # V√©rifier s'il fonctionne
                searx = SearxInterface(current_url)
                if searx.check_health():
                    logger.info("‚úÖ Searx existant op√©rationnel")
                    self.searx_ready = True
                    return True
                else:
                    logger.info("üîÑ Searx existant non fonctionnel - nettoyage...")
                    port_manager.stop_all_searx_containers()
            
            # D√©marrer Searx si Docker est pr√™t
            if self.docker_ready:
                logger.info("üöÄ D√©marrage de Searx...")
                success, url = port_manager.start_searx_smart()
                
                if success:
                    logger.info(f"‚úÖ Searx d√©marr√©: {url}")
                    
                    # Attendre que Searx soit compl√®tement pr√™t
                    self._wait_for_searx_health(url)
                    self.searx_ready = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è √âchec d√©marrage Searx")
                    return False
            else:
                logger.warning("‚ö†Ô∏è Docker non disponible - Searx sera en mode d√©grad√©")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration Searx: {e}")
            return False
    
    def _wait_for_searx_health(self, url):
        """Attend que Searx soit en bonne sant√©"""
        logger.info("‚è≥ Attente de l'initialisation compl√®te de Searx...")
        
        try:
            from searx_interface import SearxInterface
            searx = SearxInterface(url)
            
            max_wait = 30
            wait_time = 0
            
            while wait_time < max_wait:
                if searx.check_health():
                    logger.info("‚úÖ Searx compl√®tement op√©rationnel!")
                    return True
                
                time.sleep(2)
                wait_time += 2
                logger.info(f"‚è≥ V√©rification sant√© Searx... ({wait_time}/{max_wait}s)")
            
            logger.warning("‚ö†Ô∏è Searx prend plus de temps que pr√©vu √† √™tre pr√™t")
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur v√©rification sant√© Searx: {e}")
            return False
    
    def start_complete_system(self):
        """D√©marre le syst√®me complet"""
        logger.info("üéØ D√âMARRAGE DU SYST√àME SEARX AI COMPLET")
        logger.info("=" * 60)
        
        # √âtape 1: V√©rifier Docker
        docker_ok = self.check_docker()
        
        # √âtape 2: Pr√©parer Searx
        searx_ok = self.ensure_searx_ready()
        
        # √âtape 3: R√©sum√© de l'√©tat
        logger.info("üìä √âTAT DU SYST√àME:")
        logger.info(f"   üê≥ Docker: {'‚úÖ Op√©rationnel' if docker_ok else '‚ùå Non disponible'}")
        logger.info(f"   üîç Searx: {'‚úÖ Op√©rationnel' if searx_ok else '‚ö†Ô∏è Mode d√©grad√©'}")
        
        if docker_ok and searx_ok:
            logger.info("üéâ SYST√àME COMPL√àTEMENT OP√âRATIONNEL!")
            return True
        elif docker_ok:
            logger.info("‚ö†Ô∏è SYST√àME PARTIELLEMENT OP√âRATIONNEL")
            return True
        else:
            logger.info("‚ùå SYST√àME EN MODE D√âGRAD√â")
            return False

def main():
    """Fonction principale"""
    auto_starter = SearxAutoStarter()
    return auto_starter.start_complete_system()

if __name__ == "__main__":
    try:
        success = main()
        logger.info("=" * 60)
        
        if success:
            logger.info("‚úÖ PR√äT POUR LE D√âMARRAGE DE L'APPLICATION")
        else:
            logger.info("‚ö†Ô∏è D√âMARRAGE EN MODE D√âGRAD√â")
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        logger.info("‚ùå D√©marrage interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        sys.exit(1)
